//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.3038.
// 


/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Web.Services.WebServiceBindingAttribute(Name="ServiceSoap", Namespace="urn:Tesco.NGC.NGCWebService")]
public partial class Service : System.Web.Services.Protocols.SoapHttpClientProtocol {
    
    private System.Threading.SendOrPostCallback PingOperationCompleted;
    
    private System.Threading.SendOrPostCallback ConnectOperationCompleted;
    
    private System.Threading.SendOrPostCallback DisconnectOperationCompleted;
    
    private System.Threading.SendOrPostCallback InitialiseServerOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetOperationCompleted;
    
    private System.Threading.SendOrPostCallback FindOperationCompleted;
    
    private System.Threading.SendOrPostCallback SetOperationCompleted;
    
    /// <remarks/>
    public Service() {
        this.Url = "http://172.29.16.221/NGCWebService/Service.asmx";
    }
    
    /// <remarks/>
    public event PingCompletedEventHandler PingCompleted;
    
    /// <remarks/>
    public event ConnectCompletedEventHandler ConnectCompleted;
    
    /// <remarks/>
    public event DisconnectCompletedEventHandler DisconnectCompleted;
    
    /// <remarks/>
    public event InitialiseServerCompletedEventHandler InitialiseServerCompleted;
    
    /// <remarks/>
    public event GetCompletedEventHandler GetCompleted;
    
    /// <remarks/>
    public event FindCompletedEventHandler FindCompleted;
    
    /// <remarks/>
    public event SetCompletedEventHandler SetCompleted;
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:Tesco.NGC.NGCWebService/Ping", RequestNamespace="urn:Tesco.NGC.NGCWebService", ResponseNamespace="urn:Tesco.NGC.NGCWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public bool Ping() {
        object[] results = this.Invoke("Ping", new object[0]);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginPing(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("Ping", new object[0], callback, asyncState);
    }
    
    /// <remarks/>
    public bool EndPing(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void PingAsync() {
        this.PingAsync(null);
    }
    
    /// <remarks/>
    public void PingAsync(object userState) {
        if ((this.PingOperationCompleted == null)) {
            this.PingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPingOperationCompleted);
        }
        this.InvokeAsync("Ping", new object[0], this.PingOperationCompleted, userState);
    }
    
    private void OnPingOperationCompleted(object arg) {
        if ((this.PingCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.PingCompleted(this, new PingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:Tesco.NGC.NGCWebService/Connect", RequestNamespace="urn:Tesco.NGC.NGCWebService", ResponseNamespace="urn:Tesco.NGC.NGCWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public bool Connect(string userName, string password, string culture, string AppName, out string sessionId, out string capabilityXml, out string resultXml) {
        object[] results = this.Invoke("Connect", new object[] {
                    userName,
                    password,
                    culture,
                    AppName});
        sessionId = ((string)(results[1]));
        capabilityXml = ((string)(results[2]));
        resultXml = ((string)(results[3]));
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginConnect(string userName, string password, string culture, string AppName, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("Connect", new object[] {
                    userName,
                    password,
                    culture,
                    AppName}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EndConnect(System.IAsyncResult asyncResult, out string sessionId, out string capabilityXml, out string resultXml) {
        object[] results = this.EndInvoke(asyncResult);
        sessionId = ((string)(results[1]));
        capabilityXml = ((string)(results[2]));
        resultXml = ((string)(results[3]));
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void ConnectAsync(string userName, string password, string culture, string AppName) {
        this.ConnectAsync(userName, password, culture, AppName, null);
    }
    
    /// <remarks/>
    public void ConnectAsync(string userName, string password, string culture, string AppName, object userState) {
        if ((this.ConnectOperationCompleted == null)) {
            this.ConnectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnConnectOperationCompleted);
        }
        this.InvokeAsync("Connect", new object[] {
                    userName,
                    password,
                    culture,
                    AppName}, this.ConnectOperationCompleted, userState);
    }
    
    private void OnConnectOperationCompleted(object arg) {
        if ((this.ConnectCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ConnectCompleted(this, new ConnectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:Tesco.NGC.NGCWebService/Disconnect", RequestNamespace="urn:Tesco.NGC.NGCWebService", ResponseNamespace="urn:Tesco.NGC.NGCWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public bool Disconnect(string sessionId, out string resultXml) {
        object[] results = this.Invoke("Disconnect", new object[] {
                    sessionId});
        resultXml = ((string)(results[1]));
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginDisconnect(string sessionId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("Disconnect", new object[] {
                    sessionId}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EndDisconnect(System.IAsyncResult asyncResult, out string resultXml) {
        object[] results = this.EndInvoke(asyncResult);
        resultXml = ((string)(results[1]));
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void DisconnectAsync(string sessionId) {
        this.DisconnectAsync(sessionId, null);
    }
    
    /// <remarks/>
    public void DisconnectAsync(string sessionId, object userState) {
        if ((this.DisconnectOperationCompleted == null)) {
            this.DisconnectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDisconnectOperationCompleted);
        }
        this.InvokeAsync("Disconnect", new object[] {
                    sessionId}, this.DisconnectOperationCompleted, userState);
    }
    
    private void OnDisconnectOperationCompleted(object arg) {
        if ((this.DisconnectCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.DisconnectCompleted(this, new DisconnectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:Tesco.NGC.NGCWebService/InitialiseServer", RequestNamespace="urn:Tesco.NGC.NGCWebService", ResponseNamespace="urn:Tesco.NGC.NGCWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public bool InitialiseServer(string sessionId, out string resultXml) {
        object[] results = this.Invoke("InitialiseServer", new object[] {
                    sessionId});
        resultXml = ((string)(results[1]));
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginInitialiseServer(string sessionId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("InitialiseServer", new object[] {
                    sessionId}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EndInitialiseServer(System.IAsyncResult asyncResult, out string resultXml) {
        object[] results = this.EndInvoke(asyncResult);
        resultXml = ((string)(results[1]));
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void InitialiseServerAsync(string sessionId) {
        this.InitialiseServerAsync(sessionId, null);
    }
    
    /// <remarks/>
    public void InitialiseServerAsync(string sessionId, object userState) {
        if ((this.InitialiseServerOperationCompleted == null)) {
            this.InitialiseServerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInitialiseServerOperationCompleted);
        }
        this.InvokeAsync("InitialiseServer", new object[] {
                    sessionId}, this.InitialiseServerOperationCompleted, userState);
    }
    
    private void OnInitialiseServerOperationCompleted(object arg) {
        if ((this.InitialiseServerCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.InitialiseServerCompleted(this, new InitialiseServerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:Tesco.NGC.NGCWebService/Get", RequestNamespace="urn:Tesco.NGC.NGCWebService", ResponseNamespace="urn:Tesco.NGC.NGCWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public bool Get(string sessionId, string objName, string methodName, long viewObjectId, out string resultXml, out string viewXml) {
        object[] results = this.Invoke("Get", new object[] {
                    sessionId,
                    objName,
                    methodName,
                    viewObjectId});
        resultXml = ((string)(results[1]));
        viewXml = ((string)(results[2]));
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGet(string sessionId, string objName, string methodName, long viewObjectId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("Get", new object[] {
                    sessionId,
                    objName,
                    methodName,
                    viewObjectId}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EndGet(System.IAsyncResult asyncResult, out string resultXml, out string viewXml) {
        object[] results = this.EndInvoke(asyncResult);
        resultXml = ((string)(results[1]));
        viewXml = ((string)(results[2]));
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void GetAsync(string sessionId, string objName, string methodName, long viewObjectId) {
        this.GetAsync(sessionId, objName, methodName, viewObjectId, null);
    }
    
    /// <remarks/>
    public void GetAsync(string sessionId, string objName, string methodName, long viewObjectId, object userState) {
        if ((this.GetOperationCompleted == null)) {
            this.GetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOperationCompleted);
        }
        this.InvokeAsync("Get", new object[] {
                    sessionId,
                    objName,
                    methodName,
                    viewObjectId}, this.GetOperationCompleted, userState);
    }
    
    private void OnGetOperationCompleted(object arg) {
        if ((this.GetCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetCompleted(this, new GetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:Tesco.NGC.NGCWebService/Find", RequestNamespace="urn:Tesco.NGC.NGCWebService", ResponseNamespace="urn:Tesco.NGC.NGCWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public bool Find(string sessionId, string objName, string methodName, string conditionXml, int maxRowCount, out string resultXml, out string viewXml, out int rowCount) {
        object[] results = this.Invoke("Find", new object[] {
                    sessionId,
                    objName,
                    methodName,
                    conditionXml,
                    maxRowCount});
        resultXml = ((string)(results[1]));
        viewXml = ((string)(results[2]));
        rowCount = ((int)(results[3]));
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginFind(string sessionId, string objName, string methodName, string conditionXml, int maxRowCount, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("Find", new object[] {
                    sessionId,
                    objName,
                    methodName,
                    conditionXml,
                    maxRowCount}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EndFind(System.IAsyncResult asyncResult, out string resultXml, out string viewXml, out int rowCount) {
        object[] results = this.EndInvoke(asyncResult);
        resultXml = ((string)(results[1]));
        viewXml = ((string)(results[2]));
        rowCount = ((int)(results[3]));
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void FindAsync(string sessionId, string objName, string methodName, string conditionXml, int maxRowCount) {
        this.FindAsync(sessionId, objName, methodName, conditionXml, maxRowCount, null);
    }
    
    /// <remarks/>
    public void FindAsync(string sessionId, string objName, string methodName, string conditionXml, int maxRowCount, object userState) {
        if ((this.FindOperationCompleted == null)) {
            this.FindOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFindOperationCompleted);
        }
        this.InvokeAsync("Find", new object[] {
                    sessionId,
                    objName,
                    methodName,
                    conditionXml,
                    maxRowCount}, this.FindOperationCompleted, userState);
    }
    
    private void OnFindOperationCompleted(object arg) {
        if ((this.FindCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.FindCompleted(this, new FindCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:Tesco.NGC.NGCWebService/Set", RequestNamespace="urn:Tesco.NGC.NGCWebService", ResponseNamespace="urn:Tesco.NGC.NGCWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public bool Set(string sessionId, string objName, string methodName, string objectXml, out string resultXml, out long objectId) {
        object[] results = this.Invoke("Set", new object[] {
                    sessionId,
                    objName,
                    methodName,
                    objectXml});
        resultXml = ((string)(results[1]));
        objectId = ((long)(results[2]));
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginSet(string sessionId, string objName, string methodName, string objectXml, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("Set", new object[] {
                    sessionId,
                    objName,
                    methodName,
                    objectXml}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EndSet(System.IAsyncResult asyncResult, out string resultXml, out long objectId) {
        object[] results = this.EndInvoke(asyncResult);
        resultXml = ((string)(results[1]));
        objectId = ((long)(results[2]));
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void SetAsync(string sessionId, string objName, string methodName, string objectXml) {
        this.SetAsync(sessionId, objName, methodName, objectXml, null);
    }
    
    /// <remarks/>
    public void SetAsync(string sessionId, string objName, string methodName, string objectXml, object userState) {
        if ((this.SetOperationCompleted == null)) {
            this.SetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetOperationCompleted);
        }
        this.InvokeAsync("Set", new object[] {
                    sessionId,
                    objName,
                    methodName,
                    objectXml}, this.SetOperationCompleted, userState);
    }
    
    private void OnSetOperationCompleted(object arg) {
        if ((this.SetCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SetCompleted(this, new SetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    public new void CancelAsync(object userState) {
        base.CancelAsync(userState);
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
public delegate void PingCompletedEventHandler(object sender, PingCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class PingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal PingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
public delegate void ConnectCompletedEventHandler(object sender, ConnectCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class ConnectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal ConnectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public string sessionId {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[1]));
        }
    }
    
    /// <remarks/>
    public string capabilityXml {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[2]));
        }
    }
    
    /// <remarks/>
    public string resultXml {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[3]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
public delegate void DisconnectCompletedEventHandler(object sender, DisconnectCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class DisconnectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal DisconnectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public string resultXml {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[1]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
public delegate void InitialiseServerCompletedEventHandler(object sender, InitialiseServerCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class InitialiseServerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal InitialiseServerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public string resultXml {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[1]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
public delegate void GetCompletedEventHandler(object sender, GetCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public string resultXml {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[1]));
        }
    }
    
    /// <remarks/>
    public string viewXml {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[2]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
public delegate void FindCompletedEventHandler(object sender, FindCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class FindCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal FindCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public string resultXml {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[1]));
        }
    }
    
    /// <remarks/>
    public string viewXml {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[2]));
        }
    }
    
    /// <remarks/>
    public int rowCount {
        get {
            this.RaiseExceptionIfNecessary();
            return ((int)(this.results[3]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
public delegate void SetCompletedEventHandler(object sender, SetCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class SetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal SetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public string resultXml {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[1]));
        }
    }
    
    /// <remarks/>
    public long objectId {
        get {
            this.RaiseExceptionIfNecessary();
            return ((long)(this.results[2]));
        }
    }
}
