
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by CodeSmith.
//
//     Date:    4/6/2009
//     Time:    2:36 
//     Version: 5.0.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;
using System.Collections.ObjectModel;

namespace InstoreClubcardReward.Data
{
	#region GetVoucherValueRow
	/// <summary>
	/// Stores result row level information from the GetVoucherValue stored procedure.
	/// </summary>
	[Serializable]
	public class GetVoucherValueRow
	{
		#region Member Variables
		protected SqlString _valueCode = SqlString.Null;
		protected SqlString _country = SqlString.Null;
		protected SqlInt32 _voucherValue = SqlInt32.Null;
		#endregion
		
		#region Constructors
		public GetVoucherValueRow()
		{
		}
		
		public GetVoucherValueRow(SqlDataReader reader)
		{
			this.LoadFromReader(reader);
		}
		#endregion
		
		#region Helper Methods
		protected void LoadFromReader(SqlDataReader reader)
		{
			if (reader != null && !reader.IsClosed)
			{
				if (!reader.IsDBNull(0)) _valueCode = reader.GetString(0);
				if (!reader.IsDBNull(1)) _country = reader.GetString(1);
				if (!reader.IsDBNull(2)) _voucherValue = reader.GetInt32(2);
			}
		}
		#endregion
		
		#region Public Properties
		public SqlString ValueCode
		{
			get {return _valueCode;}
			set {_valueCode = value;}
		}

		public SqlString Country
		{
			get {return _country;}
			set {_country = value;}
		}

		public SqlInt32 VoucherValue
		{
			get {return _voucherValue;}
			set {_voucherValue = value;}
		}
		#endregion
	}
	#endregion
	#region GetVoucherValue Wrapper
    /// <summary>
    /// This class is a wrapper for the GetVoucherValue stored procedure.
    /// </summary>
    public class GetVoucherValue
    {
		#region Member Variables
		protected string _connectionString = String.Empty;
        protected SqlConnection _connection = null;
        protected SqlTransaction _transaction = null;
		protected bool _ownsConnection = true;
		protected int _recordsAffected = -1;
		protected int _returnValue = 0;
		protected SqlString _valueCode = SqlString.Null;
		protected bool _valueCodeSet = false;
		protected SqlString _country = SqlString.Null;
		protected bool _countrySet = false;
		#endregion
		
		#region Constructors
		public GetVoucherValue()
		{
		}
		
		public GetVoucherValue(string connectionString)
		{
			this.ConnectionString = connectionString;
		}
		
		public GetVoucherValue(SqlConnection connection)
		{
			this.Connection = connection;
		}
		
		public GetVoucherValue(SqlConnection connection, SqlTransaction transaction)
		{
			this.Connection = connection;
			this.Transaction = transaction;
		}
		#endregion
		
		#region Public Properties
		/// <summary>
		/// The connection string to use when executing the GetVoucherValue stored procedure.
		/// </summary>
		public string ConnectionString
		{
			get {return _connectionString;}
			set {_connectionString = value;}
		}
        
        /// <summary>
        /// The connection to use when executing the GetVoucherValue stored procedure.
        /// If this is not null, it will be used instead of creating a new connection.
        /// </summary>
        public SqlConnection Connection
        {
            get { return _connection; }
            set { _connection = value; }
        }
		
        /// <summary>
        /// The transaction to use when executing the GetVoucherValue stored procedure.
        /// If this is not null, the stored procedure will be executing within the transaction.
        /// </summary>
        public SqlTransaction Transaction
        {
            get { return _transaction; }
            set { _transaction = value; }
        }
		
		/// <summary>
		/// Gets the return value from the GetVoucherValue stored procedure.
		/// </summary>
		public int ReturnValue
		{
			get {return _returnValue;}
		}
		
		/// <summary>
		/// Gets the number of rows changed, inserted, or deleted by execution of the GetVoucherValue stored procedure.
		/// </summary>
		public int RecordsAffected
		{
			get {return _recordsAffected;}
		}
		
		/// <summary>
		/// 
		/// </summary>
		public SqlString ValueCode
		{
			get {return _valueCode;}
			set
			{
				_valueCode = value;
				_valueCodeSet = true;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		public SqlString Country
		{
			get {return _country;}
			set
			{
				_country = value;
				_countrySet = true;
			}
		}
		#endregion
		
		#region Helper Methods
        private SqlConnection GetConnection()
        {
            if (this.Connection != null)
            {
				_ownsConnection = false;
                return this.Connection;
            }
            else
            {
 				System.Diagnostics.Debug.Assert(this.ConnectionString.Length != 0, "You must first set the ConnectioString property before calling an Execute method.");
            	return new SqlConnection(this.ConnectionString);
            }
        }
		#endregion
		
		#region Execute Methods
		/// <summary>
		/// This method calls the GetVoucherValue stored procedure and returns a SqlDataReader with the results.
		/// </summary>
		/// <returns>SqlDataReader</returns>
		public virtual SqlDataReader ExecuteReader()
		{
			SqlDataReader reader = null;
			SqlCommand cmd = new SqlCommand();
			SqlConnection cn = this.GetConnection();
			
			try
			{
				cmd.Connection = cn;
				cmd.Transaction = this.Transaction;
				cmd.CommandText = "[dbo].[GetVoucherValue]";
				cmd.CommandType = CommandType.StoredProcedure;
				
				#region Populate Parameters
				SqlParameter prmReturnValue = cmd.Parameters.Add("@RETURN_VALUE", SqlDbType.Int);
				prmReturnValue.Direction = ParameterDirection.ReturnValue;
				
				SqlParameter prmValueCode = cmd.Parameters.Add("@ValueCode", SqlDbType.Char);
				prmValueCode.Direction = ParameterDirection.Input;
					prmValueCode.Size = 3;
				if (_valueCodeSet == true || this.ValueCode.IsNull == false)
				{
					prmValueCode.Value = this.ValueCode;
				}
				
				SqlParameter prmCountry = cmd.Parameters.Add("@Country", SqlDbType.VarChar);
				prmCountry.Direction = ParameterDirection.Input;
					prmCountry.Size = 3;
				if (_countrySet == true || this.Country.IsNull == false)
				{
					prmCountry.Value = this.Country;
				}
				#endregion
				
				#region Execute Command
                if (cn.State != ConnectionState.Open) cn.Open();
				if (_ownsConnection)
				{
					reader = cmd.ExecuteReader(CommandBehavior.CloseConnection);
				}
				else
				{
					reader = cmd.ExecuteReader();
				}
				#endregion
				
				#region Get Output Parameters
				if (prmReturnValue.Value != null && prmReturnValue.Value != DBNull.Value)
				{
					_returnValue = (int)prmReturnValue.Value;
				}
				
				#endregion
			}
			finally
			{
				cmd.Dispose();
			}
			
			return reader;
		}
		
		/// <summary>
		/// This method calls the GetVoucherValue stored procedure and returns a DataSet with the results.
		/// </summary>
		/// <returns>DataSet</returns>
		public virtual DataSet ExecuteDataSet()
		{
			DataSet ds = new DataSet();
			SqlCommand cmd = new SqlCommand();
			
			SqlConnection cn = this.GetConnection();
			
			try
			{
				cmd.Connection = cn;
				cmd.Transaction = this.Transaction;
				cmd.CommandText = "[dbo].[GetVoucherValue]";
				cmd.CommandType = CommandType.StoredProcedure;
				
				#region Populate Parameters
				SqlParameter prmReturnValue = cmd.Parameters.Add("@RETURN_VALUE", SqlDbType.Int);
				prmReturnValue.Direction = ParameterDirection.ReturnValue;
				
				SqlParameter prmValueCode = cmd.Parameters.Add("@ValueCode", SqlDbType.Char);
				prmValueCode.Direction = ParameterDirection.Input;
					prmValueCode.Size = 3;
				if (_valueCodeSet == true || this.ValueCode.IsNull == false)
				{
					prmValueCode.Value = this.ValueCode;
				}
				
				SqlParameter prmCountry = cmd.Parameters.Add("@Country", SqlDbType.VarChar);
				prmCountry.Direction = ParameterDirection.Input;
					prmCountry.Size = 3;
				if (_countrySet == true || this.Country.IsNull == false)
				{
					prmCountry.Value = this.Country;
				}
				#endregion
				
				#region Execute Command
				if (cn.State != ConnectionState.Open) cn.Open();
				
				SqlDataAdapter da = new SqlDataAdapter(cmd);
				da.Fill(ds);
				_recordsAffected = ds.Tables[0].Rows.Count;
				#endregion
				
				#region Get Output Parameters
				if (prmReturnValue.Value != null && prmReturnValue.Value != DBNull.Value)
				{
					_returnValue = (int)prmReturnValue.Value;
				}
				
				#endregion
			}
			finally
			{
				if (_ownsConnection)
				{
					if (cn.State == ConnectionState.Open)
					{
						cn.Close();
					}
					
					cn.Dispose();
				}
				cmd.Dispose();
			}
			
			return ds;
		}
		
		/// <summary>
		/// This method calls the GetVoucherValue stored procedure and outputs the results to a custom strongly typed collection.
		/// </summary>
		/// <returns>Collection<GetVoucherValueRow></returns>
		public virtual Collection<GetVoucherValueRow> Execute()
		{
			Collection<GetVoucherValueRow> getVoucherValueRowList = new Collection<GetVoucherValueRow>();
			SqlCommand cmd = new SqlCommand();
			
			SqlConnection cn = this.GetConnection();
			
			try
			{
				cmd.Connection = cn;
				cmd.Transaction = this.Transaction;
				cmd.CommandText = "[dbo].[GetVoucherValue]";
				cmd.CommandType = CommandType.StoredProcedure;
				
				#region Populate Parameters
				SqlParameter prmReturnValue = cmd.Parameters.Add("@RETURN_VALUE", SqlDbType.Int);
				prmReturnValue.Direction = ParameterDirection.ReturnValue;
				
				SqlParameter prmValueCode = cmd.Parameters.Add("@ValueCode", SqlDbType.Char);
				prmValueCode.Direction = ParameterDirection.Input;
					prmValueCode.Size = 3;
				if (_valueCodeSet == true || this.ValueCode.IsNull == false)
				{
					prmValueCode.Value = this.ValueCode;
				}
				
				SqlParameter prmCountry = cmd.Parameters.Add("@Country", SqlDbType.VarChar);
				prmCountry.Direction = ParameterDirection.Input;
					prmCountry.Size = 3;
				if (_countrySet == true || this.Country.IsNull == false)
				{
					prmCountry.Value = this.Country;
				}
				#endregion
				
				#region Execute Command
				if (cn.State != ConnectionState.Open) cn.Open();
				SqlDataReader reader = cmd.ExecuteReader();
				try
				{
					while (reader.Read())
					{
						GetVoucherValueRow getVoucherValueRow = new GetVoucherValueRow(reader);
						getVoucherValueRowList.Add(getVoucherValueRow);
					}
				}
				finally
				{
					if (!reader.IsClosed)
					{
						reader.Close();
						_recordsAffected = reader.RecordsAffected;
					}
				}
				#endregion
				
				#region Get Output Parameters
				if (prmReturnValue.Value != null && prmReturnValue.Value != DBNull.Value)
				{
					_returnValue = (int)prmReturnValue.Value;
				}
				
				#endregion
			}
			finally
			{
				if (_ownsConnection)
				{
					if (cn.State == ConnectionState.Open)
					{
						cn.Close();
					}
					
					cn.Dispose();
				}
				cmd.Dispose();
			}
			
			return getVoucherValueRowList;
		}
		
		/// <summary>
		/// This method calls the GetVoucherValue stored procedure and returns a SqlDataReader with the results.
		/// </summary>
		/// <param name="connectionString">The connection string to use</param>
		/// <param name="valueCode"></param>
		/// <param name="country"></param>
		/// <returns>SqlDataReader</returns>
		public static SqlDataReader ExecuteReader(
				#region Parameters
				string connectionString,
				SqlString valueCode,
				SqlString country
				#endregion
		    )
		{
			GetVoucherValue getVoucherValue = new GetVoucherValue();
			
			#region Assign Property Values
			getVoucherValue.ConnectionString = connectionString;
			getVoucherValue.ValueCode = valueCode;
			getVoucherValue.Country = country;
			#endregion
			
			SqlDataReader reader = getVoucherValue.ExecuteReader();
			
			#region Get Property Values
			
			#endregion
			
			return reader;
		}
		
		/// <summary>
		/// This method calls the GetVoucherValue stored procedure and returns a DataSet with the results.
		/// </summary>
		/// <param name="connectionString">The connection string to use</param>
		/// <param name="valueCode"></param>
		/// <param name="country"></param>
		/// <returns>DataSet</returns>
		public static DataSet ExecuteDataSet(
				#region Parameters
				string connectionString,
				SqlString valueCode,
				SqlString country
				#endregion
		    )
		{
			GetVoucherValue getVoucherValue = new GetVoucherValue();
			
			#region Assign Property Values
			getVoucherValue.ConnectionString = connectionString;
			getVoucherValue.ValueCode = valueCode;
			getVoucherValue.Country = country;
			#endregion
			
			DataSet ds = getVoucherValue.ExecuteDataSet();
			
			#region Get Property Values
			
			#endregion
			
			return ds;
		}
		
		/// <summary>
		/// This method calls the GetVoucherValue stored procedure and outputs the results to a custom strongly typed collection.
		/// </summary>
		/// <param name="connectionString">The connection string to use</param>
		/// <param name="valueCode"></param>
		/// <param name="country"></param>
		/// <returns>Collection<GetVoucherValueRow></returns>
		public static Collection<GetVoucherValueRow> Execute(
				#region Parameters
				string connectionString,
				SqlString valueCode,
				SqlString country
				#endregion
		    )
		{
			GetVoucherValue getVoucherValue = new GetVoucherValue();
			
			#region Assign Property Values
			getVoucherValue.ConnectionString = connectionString;
			getVoucherValue.ValueCode = valueCode;
			getVoucherValue.Country = country;
			#endregion
			
			Collection<GetVoucherValueRow> getVoucherValueRowList = getVoucherValue.Execute();
			
			#region Get Property Values
			
			#endregion
			
			return getVoucherValueRowList;
		}
		#endregion
	}
	#endregion
}

