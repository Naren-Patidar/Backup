
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by CodeSmith.
//
//     Date:    4/6/2009
//     Time:    2:36 
//     Version: 5.0.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;

namespace InstoreClubcardReward.Data
{
	#region InsertDoubleUpToken Wrapper
    /// <summary>
    /// This class is a wrapper for the InsertDoubleUpToken stored procedure.
    /// </summary>
    public class InsertDoubleUpToken
    {
		#region Member Variables
		protected string _connectionString = String.Empty;
        protected SqlConnection _connection = null;
        protected SqlTransaction _transaction = null;
		protected bool _ownsConnection = true;
		protected int _recordsAffected = -1;
		protected int _returnValue = 0;
		protected SqlGuid _transactionId = SqlGuid.Null;
		protected bool _transactionIdSet = false;
		protected SqlDateTime _transactionDateTime = SqlDateTime.Null;
		protected bool _transactionDateTimeSet = false;
		protected SqlGuid _requestId = SqlGuid.Null;
		protected bool _requestIdSet = false;
		protected SqlInt32 _requestType = SqlInt32.Null;
		protected bool _requestTypeSet = false;
		protected SqlString _alphanumericId = SqlString.Null;
		protected bool _alphanumericIdSet = false;
		protected SqlString _voucherNo = SqlString.Null;
		protected bool _voucherNoSet = false;
		protected SqlInt32 _voucherValue = SqlInt32.Null;
		protected bool _voucherValueSet = false;
		protected SqlInt32 _vendorCode = SqlInt32.Null;
		protected bool _vendorCodeSet = false;
		protected SqlString _clubcardNo = SqlString.Null;
		protected bool _clubcardNoSet = false;
		protected SqlDateTime _expiryDate = SqlDateTime.Null;
		protected bool _expiryDateSet = false;
		protected SqlInt32 _id = SqlInt32.Null;
		protected bool _idSet = false;
		#endregion
		
		#region Constructors
		public InsertDoubleUpToken()
		{
		}
		
		public InsertDoubleUpToken(string connectionString)
		{
			this.ConnectionString = connectionString;
		}
		
		public InsertDoubleUpToken(SqlConnection connection)
		{
			this.Connection = connection;
		}
		
		public InsertDoubleUpToken(SqlConnection connection, SqlTransaction transaction)
		{
			this.Connection = connection;
			this.Transaction = transaction;
		}
		#endregion
		
		#region Public Properties
		/// <summary>
		/// The connection string to use when executing the InsertDoubleUpToken stored procedure.
		/// </summary>
		public string ConnectionString
		{
			get {return _connectionString;}
			set {_connectionString = value;}
		}
        
        /// <summary>
        /// The connection to use when executing the InsertDoubleUpToken stored procedure.
        /// If this is not null, it will be used instead of creating a new connection.
        /// </summary>
        public SqlConnection Connection
        {
            get { return _connection; }
            set { _connection = value; }
        }
		
        /// <summary>
        /// The transaction to use when executing the InsertDoubleUpToken stored procedure.
        /// If this is not null, the stored procedure will be executing within the transaction.
        /// </summary>
        public SqlTransaction Transaction
        {
            get { return _transaction; }
            set { _transaction = value; }
        }
		
		/// <summary>
		/// Gets the return value from the InsertDoubleUpToken stored procedure.
		/// </summary>
		public int ReturnValue
		{
			get {return _returnValue;}
		}
		
		/// <summary>
		/// Gets the number of rows changed, inserted, or deleted by execution of the InsertDoubleUpToken stored procedure.
		/// </summary>
		public int RecordsAffected
		{
			get {return _recordsAffected;}
		}
		
		/// <summary>
		/// 
		/// </summary>
		public SqlGuid TransactionId
		{
			get {return _transactionId;}
			set
			{
				_transactionId = value;
				_transactionIdSet = true;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		public SqlDateTime TransactionDateTime
		{
			get {return _transactionDateTime;}
			set
			{
				_transactionDateTime = value;
				_transactionDateTimeSet = true;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		public SqlGuid RequestId
		{
			get {return _requestId;}
			set
			{
				_requestId = value;
				_requestIdSet = true;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		public SqlInt32 RequestType
		{
			get {return _requestType;}
			set
			{
				_requestType = value;
				_requestTypeSet = true;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		public SqlString AlphanumericId
		{
			get {return _alphanumericId;}
			set
			{
				_alphanumericId = value;
				_alphanumericIdSet = true;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		public SqlString VoucherNo
		{
			get {return _voucherNo;}
			set
			{
				_voucherNo = value;
				_voucherNoSet = true;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		public SqlInt32 VoucherValue
		{
			get {return _voucherValue;}
			set
			{
				_voucherValue = value;
				_voucherValueSet = true;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		public SqlInt32 VendorCode
		{
			get {return _vendorCode;}
			set
			{
				_vendorCode = value;
				_vendorCodeSet = true;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		public SqlString ClubcardNo
		{
			get {return _clubcardNo;}
			set
			{
				_clubcardNo = value;
				_clubcardNoSet = true;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		public SqlDateTime ExpiryDate
		{
			get {return _expiryDate;}
			set
			{
				_expiryDate = value;
				_expiryDateSet = true;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		public SqlInt32 Id
		{
			get {return _id;}
			set
			{
				_id = value;
				_idSet = true;
			}
		}
		#endregion
		
		#region Helper Methods
        private SqlConnection GetConnection()
        {
            if (this.Connection != null)
            {
				_ownsConnection = false;
                return this.Connection;
            }
            else
            {
 				System.Diagnostics.Debug.Assert(this.ConnectionString.Length != 0, "You must first set the ConnectioString property before calling an Execute method.");
            	return new SqlConnection(this.ConnectionString);
            }
        }
		#endregion
		
		#region Execute Methods
		/// <summary>
		/// This method calls the InsertDoubleUpToken stored procedure.
		/// </summary>
		public virtual void Execute()
		{
			SqlCommand cmd = new SqlCommand();
			
			SqlConnection cn = this.GetConnection();
			
			try
			{
				cmd.Connection = cn;
				cmd.Transaction = this.Transaction;
				cmd.CommandText = "[dbo].[InsertDoubleUpToken]";
				cmd.CommandType = CommandType.StoredProcedure;
				
				#region Populate Parameters
				SqlParameter prmReturnValue = cmd.Parameters.Add("@RETURN_VALUE", SqlDbType.Int);
				prmReturnValue.Direction = ParameterDirection.ReturnValue;
				
				SqlParameter prmTransactionId = cmd.Parameters.Add("@TransactionId", SqlDbType.UniqueIdentifier);
				prmTransactionId.Direction = ParameterDirection.Input;
				if (_transactionIdSet == true || this.TransactionId.IsNull == false)
				{
					prmTransactionId.Value = this.TransactionId;
				}
				
				SqlParameter prmTransactionDateTime = cmd.Parameters.Add("@TransactionDateTime", SqlDbType.DateTime);
				prmTransactionDateTime.Direction = ParameterDirection.Input;
				if (_transactionDateTimeSet == true || this.TransactionDateTime.IsNull == false)
				{
					prmTransactionDateTime.Value = this.TransactionDateTime;
				}
				
				SqlParameter prmRequestId = cmd.Parameters.Add("@RequestId", SqlDbType.UniqueIdentifier);
				prmRequestId.Direction = ParameterDirection.Input;
				if (_requestIdSet == true || this.RequestId.IsNull == false)
				{
					prmRequestId.Value = this.RequestId;
				}
				
				SqlParameter prmRequestType = cmd.Parameters.Add("@RequestType", SqlDbType.Int);
				prmRequestType.Direction = ParameterDirection.Input;
				if (_requestTypeSet == true || this.RequestType.IsNull == false)
				{
					prmRequestType.Value = this.RequestType;
				}
				
				SqlParameter prmAlphanumericId = cmd.Parameters.Add("@AlphanumericId", SqlDbType.VarChar);
				prmAlphanumericId.Direction = ParameterDirection.Input;
					prmAlphanumericId.Size = 12;
				if (_alphanumericIdSet == true || this.AlphanumericId.IsNull == false)
				{
					prmAlphanumericId.Value = this.AlphanumericId;
				}
				
				SqlParameter prmVoucherNo = cmd.Parameters.Add("@VoucherNo", SqlDbType.VarChar);
				prmVoucherNo.Direction = ParameterDirection.Input;
					prmVoucherNo.Size = 22;
				if (_voucherNoSet == true || this.VoucherNo.IsNull == false)
				{
					prmVoucherNo.Value = this.VoucherNo;
				}
				
				SqlParameter prmVoucherValue = cmd.Parameters.Add("@VoucherValue", SqlDbType.Int);
				prmVoucherValue.Direction = ParameterDirection.Input;
				if (_voucherValueSet == true || this.VoucherValue.IsNull == false)
				{
					prmVoucherValue.Value = this.VoucherValue;
				}
				
				SqlParameter prmVendorCode = cmd.Parameters.Add("@VendorCode", SqlDbType.Int);
				prmVendorCode.Direction = ParameterDirection.Input;
				if (_vendorCodeSet == true || this.VendorCode.IsNull == false)
				{
					prmVendorCode.Value = this.VendorCode;
				}
				
				SqlParameter prmClubcardNo = cmd.Parameters.Add("@ClubcardNo", SqlDbType.VarChar);
				prmClubcardNo.Direction = ParameterDirection.Input;
					prmClubcardNo.Size = 18;
				if (_clubcardNoSet == true || this.ClubcardNo.IsNull == false)
				{
					prmClubcardNo.Value = this.ClubcardNo;
				}
				
				SqlParameter prmExpiryDate = cmd.Parameters.Add("@ExpiryDate", SqlDbType.DateTime);
				prmExpiryDate.Direction = ParameterDirection.Input;
				if (_expiryDateSet == true || this.ExpiryDate.IsNull == false)
				{
					prmExpiryDate.Value = this.ExpiryDate;
				}
				
				SqlParameter prmId = cmd.Parameters.Add("@Id", SqlDbType.Int);
				if (_idSet == true)
				{
				prmId.Direction = ParameterDirection.InputOutput;
				}
				else
				{
					prmId.Direction = ParameterDirection.Output;
				}
				if (_idSet == true || this.Id.IsNull == false)
				{
					prmId.Value = this.Id;
				}
				#endregion
				
				#region Execute Command
				if (cn.State != ConnectionState.Open) cn.Open();
				_recordsAffected = cmd.ExecuteNonQuery();
				#endregion
				
				#region Get Output Parameters
				if (prmReturnValue.Value != null && prmReturnValue.Value != DBNull.Value)
				{
					_returnValue = (int)prmReturnValue.Value;
				}
				
				if (prmId != null && prmId.Value != null)
				{
					if (prmId.Value is SqlInt32)
					{
						this.Id = (SqlInt32)prmId.Value;
					}
					else
					{
						if (prmId.Value != DBNull.Value)
						{
							this.Id = new SqlInt32((int)prmId.Value);
						}
						else
						{
							this.Id = SqlInt32.Null;
						}
					}
				}
				else
				{
					this.Id = SqlInt32.Null;
				}
				#endregion
			}
			finally
			{
				if (_ownsConnection)
				{
					if (cn.State == ConnectionState.Open)
					{
						cn.Close();
					}
					
					cn.Dispose();
				}
				cmd.Dispose();
			}
		}
		
		/// <summary>
		/// This method calls the InsertDoubleUpToken stored procedure.
		/// </summary>
		/// <param name="connectionString">The connection string to use</param>
		/// <param name="transactionId"></param>
		/// <param name="transactionDateTime"></param>
		/// <param name="requestId"></param>
		/// <param name="requestType"></param>
		/// <param name="alphanumericId"></param>
		/// <param name="voucherNo"></param>
		/// <param name="voucherValue"></param>
		/// <param name="vendorCode"></param>
		/// <param name="clubcardNo"></param>
		/// <param name="expiryDate"></param>
		/// <param name="id"></param>
		public static void Execute(
				#region Parameters
				string connectionString,
				SqlGuid transactionId,
				SqlDateTime transactionDateTime,
				SqlGuid requestId,
				SqlInt32 requestType,
				SqlString alphanumericId,
				SqlString voucherNo,
				SqlInt32 voucherValue,
				SqlInt32 vendorCode,
				SqlString clubcardNo,
				SqlDateTime expiryDate,
				ref SqlInt32 id
				#endregion
		    )
		{
			InsertDoubleUpToken insertDoubleUpToken = new InsertDoubleUpToken();
			
			#region Assign Property Values
			insertDoubleUpToken.ConnectionString = connectionString;
			insertDoubleUpToken.TransactionId = transactionId;
			insertDoubleUpToken.TransactionDateTime = transactionDateTime;
			insertDoubleUpToken.RequestId = requestId;
			insertDoubleUpToken.RequestType = requestType;
			insertDoubleUpToken.AlphanumericId = alphanumericId;
			insertDoubleUpToken.VoucherNo = voucherNo;
			insertDoubleUpToken.VoucherValue = voucherValue;
			insertDoubleUpToken.VendorCode = vendorCode;
			insertDoubleUpToken.ClubcardNo = clubcardNo;
			insertDoubleUpToken.ExpiryDate = expiryDate;
			insertDoubleUpToken.Id = id;
			#endregion
			
			insertDoubleUpToken.Execute();
			
			#region Get Property Values
			id = insertDoubleUpToken.Id;
			#endregion
		}
		#endregion
	}
	#endregion
}

