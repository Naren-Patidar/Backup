
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by CodeSmith.
//
//     Date:    4/6/2009
//     Time:    2:36 
//     Version: 5.0.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;

namespace InstoreClubcardReward.Data
{
	#region InsertNGCTiming Wrapper
    /// <summary>
    /// This class is a wrapper for the InsertNGCTiming stored procedure.
    /// </summary>
    public class InsertNGCTiming
    {
		#region Member Variables
		protected string _connectionString = String.Empty;
        protected SqlConnection _connection = null;
        protected SqlTransaction _transaction = null;
		protected bool _ownsConnection = true;
		protected int _recordsAffected = -1;
		protected int _returnValue = 0;
		protected SqlInt32 _requestId = SqlInt32.Null;
		protected bool _requestIdSet = false;
		protected SqlDateTime _beforeServiceCall = SqlDateTime.Null;
		protected bool _beforeServiceCallSet = false;
		protected SqlDateTime _afterServiceCall = SqlDateTime.Null;
		protected bool _afterServiceCallSet = false;
		protected SqlInt64 _msgInterval = SqlInt64.Null;
		protected bool _msgIntervalSet = false;
		#endregion
		
		#region Constructors
		public InsertNGCTiming()
		{
		}
		
		public InsertNGCTiming(string connectionString)
		{
			this.ConnectionString = connectionString;
		}
		
		public InsertNGCTiming(SqlConnection connection)
		{
			this.Connection = connection;
		}
		
		public InsertNGCTiming(SqlConnection connection, SqlTransaction transaction)
		{
			this.Connection = connection;
			this.Transaction = transaction;
		}
		#endregion
		
		#region Public Properties
		/// <summary>
		/// The connection string to use when executing the InsertNGCTiming stored procedure.
		/// </summary>
		public string ConnectionString
		{
			get {return _connectionString;}
			set {_connectionString = value;}
		}
        
        /// <summary>
        /// The connection to use when executing the InsertNGCTiming stored procedure.
        /// If this is not null, it will be used instead of creating a new connection.
        /// </summary>
        public SqlConnection Connection
        {
            get { return _connection; }
            set { _connection = value; }
        }
		
        /// <summary>
        /// The transaction to use when executing the InsertNGCTiming stored procedure.
        /// If this is not null, the stored procedure will be executing within the transaction.
        /// </summary>
        public SqlTransaction Transaction
        {
            get { return _transaction; }
            set { _transaction = value; }
        }
		
		/// <summary>
		/// Gets the return value from the InsertNGCTiming stored procedure.
		/// </summary>
		public int ReturnValue
		{
			get {return _returnValue;}
		}
		
		/// <summary>
		/// Gets the number of rows changed, inserted, or deleted by execution of the InsertNGCTiming stored procedure.
		/// </summary>
		public int RecordsAffected
		{
			get {return _recordsAffected;}
		}
		
		/// <summary>
		/// 
		/// </summary>
		public SqlInt32 RequestId
		{
			get {return _requestId;}
			set
			{
				_requestId = value;
				_requestIdSet = true;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		public SqlDateTime beforeServiceCall
		{
			get {return _beforeServiceCall;}
			set
			{
				_beforeServiceCall = value;
				_beforeServiceCallSet = true;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		public SqlDateTime afterServiceCall
		{
			get {return _afterServiceCall;}
			set
			{
				_afterServiceCall = value;
				_afterServiceCallSet = true;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		public SqlInt64 MsgInterval
		{
			get {return _msgInterval;}
			set
			{
				_msgInterval = value;
				_msgIntervalSet = true;
			}
		}
		#endregion
		
		#region Helper Methods
        private SqlConnection GetConnection()
        {
            if (this.Connection != null)
            {
				_ownsConnection = false;
                return this.Connection;
            }
            else
            {
 				System.Diagnostics.Debug.Assert(this.ConnectionString.Length != 0, "You must first set the ConnectioString property before calling an Execute method.");
            	return new SqlConnection(this.ConnectionString);
            }
        }
		#endregion
		
		#region Execute Methods
		/// <summary>
		/// This method calls the InsertNGCTiming stored procedure.
		/// </summary>
		public virtual void Execute()
		{
			SqlCommand cmd = new SqlCommand();
			
			SqlConnection cn = this.GetConnection();
			
			try
			{
				cmd.Connection = cn;
				cmd.Transaction = this.Transaction;
				cmd.CommandText = "[dbo].[InsertNGCTiming]";
				cmd.CommandType = CommandType.StoredProcedure;
				
				#region Populate Parameters
				SqlParameter prmReturnValue = cmd.Parameters.Add("@RETURN_VALUE", SqlDbType.Int);
				prmReturnValue.Direction = ParameterDirection.ReturnValue;
				
				SqlParameter prmRequestId = cmd.Parameters.Add("@RequestId", SqlDbType.Int);
				prmRequestId.Direction = ParameterDirection.Input;
				if (_requestIdSet == true || this.RequestId.IsNull == false)
				{
					prmRequestId.Value = this.RequestId;
				}
				
				SqlParameter prmbeforeServiceCall = cmd.Parameters.Add("@beforeServiceCall", SqlDbType.DateTime);
				prmbeforeServiceCall.Direction = ParameterDirection.Input;
				if (_beforeServiceCallSet == true || this.beforeServiceCall.IsNull == false)
				{
					prmbeforeServiceCall.Value = this.beforeServiceCall;
				}
				
				SqlParameter prmafterServiceCall = cmd.Parameters.Add("@afterServiceCall", SqlDbType.DateTime);
				prmafterServiceCall.Direction = ParameterDirection.Input;
				if (_afterServiceCallSet == true || this.afterServiceCall.IsNull == false)
				{
					prmafterServiceCall.Value = this.afterServiceCall;
				}
				
				SqlParameter prmMsgInterval = cmd.Parameters.Add("@MsgInterval", SqlDbType.BigInt);
				prmMsgInterval.Direction = ParameterDirection.Input;
				if (_msgIntervalSet == true || this.MsgInterval.IsNull == false)
				{
					prmMsgInterval.Value = this.MsgInterval;
				}
				#endregion
				
				#region Execute Command
				if (cn.State != ConnectionState.Open) cn.Open();
				_recordsAffected = cmd.ExecuteNonQuery();
				#endregion
				
				#region Get Output Parameters
				if (prmReturnValue.Value != null && prmReturnValue.Value != DBNull.Value)
				{
					_returnValue = (int)prmReturnValue.Value;
				}
				
				#endregion
			}
			finally
			{
				if (_ownsConnection)
				{
					if (cn.State == ConnectionState.Open)
					{
						cn.Close();
					}
					
					cn.Dispose();
				}
				cmd.Dispose();
			}
		}
		
		/// <summary>
		/// This method calls the InsertNGCTiming stored procedure.
		/// </summary>
		/// <param name="connectionString">The connection string to use</param>
		/// <param name="requestId"></param>
		/// <param name="beforeServiceCall"></param>
		/// <param name="afterServiceCall"></param>
		/// <param name="msgInterval"></param>
		public static void Execute(
				#region Parameters
				string connectionString,
				SqlInt32 requestId,
				SqlDateTime beforeServiceCall,
				SqlDateTime afterServiceCall,
				SqlInt64 msgInterval
				#endregion
		    )
		{
			InsertNGCTiming insertNGCTiming = new InsertNGCTiming();
			
			#region Assign Property Values
			insertNGCTiming.ConnectionString = connectionString;
			insertNGCTiming.RequestId = requestId;
			insertNGCTiming.beforeServiceCall = beforeServiceCall;
			insertNGCTiming.afterServiceCall = afterServiceCall;
			insertNGCTiming.MsgInterval = msgInterval;
			#endregion
			
			insertNGCTiming.Execute();
			
			#region Get Property Values
			
			#endregion
		}
		#endregion
	}
	#endregion
}

