
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by CodeSmith.
//
//     Version: 5.0.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.ObjectModel;

namespace InstoreClubcardReward.Data
{
    #region SelectCategoryIncludeRow
    /// <summary>
    /// Stores result row level information from the SelectCategoryInclude stored procedure.
    /// </summary>
    [Serializable]
    public class SelectCategoryIncludeRow
    {
        #region Member Variables
        protected int? _categoryId;
        protected int? _lineId;
        protected string _description1;
        protected string _description2;
        protected string _description3;
        #endregion

        #region Constructors
        public SelectCategoryIncludeRow()
        {
        }

        public SelectCategoryIncludeRow(SqlDataReader reader)
        {
            this.LoadFromReader(reader);
        }
        #endregion

        #region Helper Methods
        protected void LoadFromReader(SqlDataReader reader)
        {
            if (reader != null && !reader.IsClosed)
            {
                if (!reader.IsDBNull(0)) _categoryId = reader.GetInt32(0);
                if (!reader.IsDBNull(1)) _lineId = reader.GetInt32(1);
                if (!reader.IsDBNull(2)) _description1 = reader.GetString(2);
                if (!reader.IsDBNull(3)) _description2 = reader.GetString(3);
                if (!reader.IsDBNull(4)) _description3 = reader.GetString(4);
            }
        }
        #endregion

        #region Public Properties
        public int? CategoryId
        {
            get { return _categoryId; }
            set { _categoryId = value; }
        }

        public int? LineId
        {
            get { return _lineId; }
            set { _lineId = value; }
        }

        public string Description1
        {
            get { return _description1; }
            set { _description1 = value; }
        }

        public string Description2
        {
            get { return _description2; }
            set { _description2 = value; }
        }

        public string Description3
        {
            get { return _description3; }
            set { _description3 = value; }
        }
        #endregion
    }
    #endregion
    #region SelectCategoryInclude Wrapper
    /// <summary>
    /// This class is a wrapper for the SelectCategoryInclude stored procedure.
    /// </summary>
    public class SelectCategoryInclude
    {
        #region Member Variables

        protected string _connectionString = String.Empty;
        protected SqlConnection _connection;
        protected SqlTransaction _transaction;
        protected bool _ownsConnection = true;
        protected int _recordsAffected = -1;
        protected System.Int32 _returnValue;
        protected int? _categoryId;

        #endregion

        #region Constructors

        public SelectCategoryInclude()
        {
        }

        public SelectCategoryInclude(string connectionString)
        {
            this.ConnectionString = connectionString;
        }

        public SelectCategoryInclude(SqlConnection connection)
        {
            this.Connection = connection;
        }

        public SelectCategoryInclude(SqlConnection connection, SqlTransaction transaction)
        {
            this.Connection = connection;
            this.Transaction = transaction;
        }

        #endregion

        #region Public Properties

        /// <summary>
        /// The connection string to use when executing the SelectCategoryInclude stored procedure.
        /// </summary>
        public string ConnectionString
        {
            get { return _connectionString; }
            set { _connectionString = value; }
        }

        /// <summary>
        /// The connection to use when executing the SelectCategoryInclude stored procedure.
        /// If this is not null, it will be used instead of creating a new connection.
        /// </summary>
        public SqlConnection Connection
        {
            get { return _connection; }
            set { _connection = value; }
        }

        /// <summary>
        /// The transaction to use when executing the SelectCategoryInclude stored procedure.
        /// If this is not null, the stored procedure will be executing within the transaction.
        /// </summary>
        public SqlTransaction Transaction
        {
            get { return _transaction; }
            set { _transaction = value; }
        }

        /// <summary>
        /// Gets the return value from the SelectCategoryInclude stored procedure.
        /// </summary>
        public System.Int32 ReturnValue
        {
            get { return _returnValue; }
        }

        /// <summary>
        /// Gets the number of rows changed, inserted, or deleted by execution of the SelectCategoryInclude stored procedure.
        /// </summary>
        public int RecordsAffected
        {
            get { return _recordsAffected; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int? CategoryId
        {
            get { return _categoryId; }
            set
            {
                _categoryId = value;
            }
        }

        #endregion

        #region Helper Methods

        private SqlConnection GetConnection()
        {
            if (this.Connection != null)
            {
                _ownsConnection = false;
                return this.Connection;
            }

            System.Diagnostics.Debug.Assert(this.ConnectionString.Length != 0, "You must first set the ConnectioString property before calling an Execute method.");
            return new SqlConnection(this.ConnectionString);
        }

        #endregion

        #region Execute Methods

        /// <summary>
        /// This method calls the SelectCategoryInclude stored procedure and returns a SqlDataReader with the results.
        /// </summary>
        /// <returns>SqlDataReader</returns>
        public virtual SqlDataReader ExecuteReader()
        {
            SqlDataReader reader = null;
            SqlCommand cmd = new SqlCommand();
            SqlConnection cn = this.GetConnection();

            try
            {
                cmd.Connection = cn;
                cmd.Transaction = this.Transaction;
                cmd.CommandText = "[dbo].[SelectCategoryInclude]";
                cmd.CommandType = CommandType.StoredProcedure;

                #region Populate Parameters

                SqlParameter prmReturnValue = cmd.Parameters.Add("@RETURN_VALUE", SqlDbType.Int);
                prmReturnValue.Direction = ParameterDirection.ReturnValue;

                SqlParameter prmCategoryId = cmd.Parameters.Add("@CategoryId", SqlDbType.Int);
                prmCategoryId.Direction = ParameterDirection.Input;
                if (CategoryId.HasValue)
                    prmCategoryId.Value = CategoryId.Value;
                else
                    prmCategoryId.Value = DBNull.Value;

                #endregion

                #region Execute Command
                if (cn.State != ConnectionState.Open) cn.Open();
                if (_ownsConnection)
                {
                    reader = cmd.ExecuteReader(CommandBehavior.CloseConnection);
                }
                else
                {
                    reader = cmd.ExecuteReader();
                }
                #endregion

                #region Get Output Parameters
                if (prmReturnValue.Value != null && prmReturnValue.Value != DBNull.Value)
                {
                    _returnValue = (System.Int32)prmReturnValue.Value;
                }

                #endregion
            }
            finally
            {
                cmd.Dispose();
            }

            return reader;
        }

        /// <summary>
        /// This method calls the SelectCategoryInclude stored procedure and returns a DataSet with the results.
        /// </summary>
        /// <returns>DataSet</returns>
        public virtual DataSet ExecuteDataSet()
        {
            DataSet ds = new DataSet();
            SqlCommand cmd = new SqlCommand();

            SqlConnection cn = this.GetConnection();

            try
            {
                cmd.Connection = cn;
                cmd.Transaction = this.Transaction;
                cmd.CommandText = "[dbo].[SelectCategoryInclude]";
                cmd.CommandType = CommandType.StoredProcedure;

                #region Populate Parameters
                SqlParameter prmReturnValue = cmd.Parameters.Add("@RETURN_VALUE", SqlDbType.Int);
                prmReturnValue.Direction = ParameterDirection.ReturnValue;

                SqlParameter prmCategoryId = cmd.Parameters.Add("@CategoryId", SqlDbType.Int);
                prmCategoryId.Direction = ParameterDirection.Input;
                if (CategoryId.HasValue)
                    prmCategoryId.Value = CategoryId.Value;
                else
                    prmCategoryId.Value = DBNull.Value;

                #endregion

                #region Execute Command
                if (cn.State != ConnectionState.Open) cn.Open();

                SqlDataAdapter da = new SqlDataAdapter(cmd);
                da.Fill(ds);
                _recordsAffected = ds.Tables[0].Rows.Count;
                #endregion

                #region Get Output Parameters
                if (prmReturnValue.Value != null && prmReturnValue.Value != DBNull.Value)
                {
                    _returnValue = (System.Int32)prmReturnValue.Value;
                }

                #endregion
            }
            finally
            {
                if (_ownsConnection)
                {
                    if (cn.State == ConnectionState.Open)
                    {
                        cn.Close();
                    }

                    cn.Dispose();
                }
                cmd.Dispose();
            }

            return ds;
        }

        /// <summary>
        /// This method calls the SelectCategoryInclude stored procedure and outputs the results to a custom strongly typed collection.
        /// </summary>
        /// <returns>Collection<SelectCategoryIncludeRow></returns>
        public virtual Collection<SelectCategoryIncludeRow> Execute()
        {
            Collection<SelectCategoryIncludeRow> selectCategoryIncludeRowList = new Collection<SelectCategoryIncludeRow>();
            SqlCommand cmd = new SqlCommand();

            SqlConnection cn = this.GetConnection();

            try
            {
                cmd.Connection = cn;
                cmd.Transaction = this.Transaction;
                cmd.CommandText = "[dbo].[SelectCategoryInclude]";
                cmd.CommandType = CommandType.StoredProcedure;

                #region Populate Parameters
                SqlParameter prmReturnValue = cmd.Parameters.Add("@RETURN_VALUE", SqlDbType.Int);
                prmReturnValue.Direction = ParameterDirection.ReturnValue;

                SqlParameter prmCategoryId = cmd.Parameters.Add("@CategoryId", SqlDbType.Int);
                prmCategoryId.Direction = ParameterDirection.Input;
                if (CategoryId.HasValue)
                    prmCategoryId.Value = CategoryId.Value;
                else
                    prmCategoryId.Value = DBNull.Value;

                #endregion

                #region Execute Command
                if (cn.State != ConnectionState.Open) cn.Open();
                SqlDataReader reader = cmd.ExecuteReader();
                try
                {
                    while (reader.Read())
                    {
                        SelectCategoryIncludeRow selectCategoryIncludeRow = new SelectCategoryIncludeRow(reader);
                        selectCategoryIncludeRowList.Add(selectCategoryIncludeRow);
                    }
                }
                finally
                {
                    if (!reader.IsClosed)
                    {
                        reader.Close();
                        _recordsAffected = reader.RecordsAffected;
                    }
                }
                #endregion

                #region Get Output Parameters
                if (prmReturnValue.Value != null && prmReturnValue.Value != DBNull.Value)
                {
                    _returnValue = (System.Int32)prmReturnValue.Value;
                }

                #endregion
            }
            finally
            {
                if (_ownsConnection)
                {
                    if (cn.State == ConnectionState.Open)
                    {
                        cn.Close();
                    }

                    cn.Dispose();
                }
                cmd.Dispose();
            }

            return selectCategoryIncludeRowList;
        }

        /// <summary>
        /// This method calls the SelectCategoryInclude stored procedure and returns a SqlDataReader with the results.
        /// </summary>
        /// <param name="connectionString">The connection string to use</param>
        /// <param name="categoryId"></param>
        /// <returns>SqlDataReader</returns>
        public static SqlDataReader ExecuteReader(
        #region Parameters
string connectionString,
                int? categoryId
        #endregion
)
        {
            SelectCategoryInclude selectCategoryInclude = new SelectCategoryInclude();

            #region Assign Property Values
            selectCategoryInclude.ConnectionString = connectionString;
            selectCategoryInclude.CategoryId = categoryId;
            #endregion

            SqlDataReader reader = selectCategoryInclude.ExecuteReader();

            #region Get Property Values

            #endregion

            return reader;
        }

        /// <summary>
        /// This method calls the SelectCategoryInclude stored procedure and returns a DataSet with the results.
        /// </summary>
        /// <param name="connectionString">The connection string to use</param>
        /// <param name="categoryId"></param>
        /// <returns>DataSet</returns>
        public static DataSet ExecuteDataSet(
        #region Parameters
string connectionString,
                int? categoryId
        #endregion
)
        {
            SelectCategoryInclude selectCategoryInclude = new SelectCategoryInclude();

            #region Assign Property Values
            selectCategoryInclude.ConnectionString = connectionString;
            selectCategoryInclude.CategoryId = categoryId;
            #endregion

            DataSet ds = selectCategoryInclude.ExecuteDataSet();

            #region Get Property Values

            #endregion

            return ds;
        }

        /// <summary>
        /// This method calls the SelectCategoryInclude stored procedure and outputs the results to a custom strongly typed collection.
        /// </summary>
        /// <param name="connectionString">The connection string to use</param>
        /// <param name="categoryId"></param>
        /// <returns>Collection<SelectCategoryIncludeRow></returns>
        public static Collection<SelectCategoryIncludeRow> Execute(
        #region Parameters
string connectionString,
                int? categoryId
        #endregion
)
        {
            SelectCategoryInclude selectCategoryInclude = new SelectCategoryInclude();

            #region Assign Property Values
            selectCategoryInclude.ConnectionString = connectionString;
            selectCategoryInclude.CategoryId = categoryId;
            #endregion

            Collection<SelectCategoryIncludeRow> selectCategoryIncludeRowList = selectCategoryInclude.Execute();

            #region Get Property Values

            #endregion

            return selectCategoryIncludeRowList;
        }
        #endregion
    }
    #endregion
}

