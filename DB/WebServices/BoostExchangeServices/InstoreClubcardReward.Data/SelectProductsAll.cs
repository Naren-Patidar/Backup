
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by CodeSmith.
//
//     Version: 5.0.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.ObjectModel;

namespace InstoreClubcardReward.Data
{
    #region SelectProductsAllRow
    /// <summary>
    /// Stores result row level information from the SelectProductsAll stored procedure.
    /// </summary>
    [Serializable]
    public class SelectProductsAllRow
    {
        #region Member Variables
        protected string _productCode;
        protected string _description;
        protected string _vendorCode;
        protected int? _customerPrice;
        protected int? _tokenValue;
        protected string _country;
        protected string _validUntil;
        protected DateTime? _enableDate;
        protected DateTime? _disableDate;
        protected int? _productType;
        protected int? _displayOrder;
        protected DateTime? _usedByDate;
        protected string _imageFilename;
        protected int? _categoryId;
        protected string _shortDescription;
        protected string _longDescription;
        protected int? _tokenType;
        protected string _tokenTitle;
        protected string _tokenDescription;
        protected string _tokenTermsAndConditions;
        #endregion

        #region Constructors
        public SelectProductsAllRow()
        {
        }

        public SelectProductsAllRow(SqlDataReader reader)
        {
            this.LoadFromReader(reader);
        }
        #endregion

        #region Helper Methods
        protected void LoadFromReader(SqlDataReader reader)
        {
            if (reader != null && !reader.IsClosed)
            {
                if (!reader.IsDBNull(0)) _productCode = reader.GetString(0);
                if (!reader.IsDBNull(1)) _description = reader.GetString(1);
                if (!reader.IsDBNull(2)) _vendorCode = reader.GetString(2);
                if (!reader.IsDBNull(3)) _customerPrice = reader.GetInt32(3);
                if (!reader.IsDBNull(4)) _tokenValue = reader.GetInt32(4);
                if (!reader.IsDBNull(5)) _country = reader.GetString(5);
                if (!reader.IsDBNull(6)) _validUntil = reader.GetString(6);
                if (!reader.IsDBNull(7)) _enableDate = reader.GetDateTime(7);
                if (!reader.IsDBNull(8)) _disableDate = reader.GetDateTime(8);
                if (!reader.IsDBNull(9)) _productType = reader.GetInt32(9);
                if (!reader.IsDBNull(10)) _displayOrder = reader.GetInt32(10);
                if (!reader.IsDBNull(11)) _usedByDate = reader.GetDateTime(11);
                if (!reader.IsDBNull(12)) _imageFilename = reader.GetString(12);
                if (!reader.IsDBNull(13)) _categoryId = reader.GetInt32(13);
                if (!reader.IsDBNull(14)) _shortDescription = reader.GetString(14);
                if (!reader.IsDBNull(15)) _longDescription = reader.GetString(15);
                if (!reader.IsDBNull(16)) _tokenType = reader.GetInt32(16);
                if (!reader.IsDBNull(17)) _tokenTitle = reader.GetString(17);
                if (!reader.IsDBNull(18)) _tokenDescription = reader.GetString(18);
                if (!reader.IsDBNull(19)) _tokenTermsAndConditions = reader.GetString(19);
            }
        }
        #endregion

        #region Public Properties
        public string ProductCode
        {
            get { return _productCode; }
            set { _productCode = value; }
        }

        public string Description
        {
            get { return _description; }
            set { _description = value; }
        }

        public string VendorCode
        {
            get { return _vendorCode; }
            set { _vendorCode = value; }
        }

        public int? CustomerPrice
        {
            get { return _customerPrice; }
            set { _customerPrice = value; }
        }

        public int? TokenValue
        {
            get { return _tokenValue; }
            set { _tokenValue = value; }
        }

        public string Country
        {
            get { return _country; }
            set { _country = value; }
        }

        public string ValidUntil
        {
            get { return _validUntil; }
            set { _validUntil = value; }
        }

        public DateTime? EnableDate
        {
            get { return _enableDate; }
            set { _enableDate = value; }
        }

        public DateTime? DisableDate
        {
            get { return _disableDate; }
            set { _disableDate = value; }
        }

        public int? ProductType
        {
            get { return _productType; }
            set { _productType = value; }
        }

        public int? DisplayOrder
        {
            get { return _displayOrder; }
            set { _displayOrder = value; }
        }

        public DateTime? UsedByDate
        {
            get { return _usedByDate; }
            set { _usedByDate = value; }
        }

        public string ImageFilename
        {
            get { return _imageFilename; }
            set { _imageFilename = value; }
        }

        public int? CategoryId
        {
            get { return _categoryId; }
            set { _categoryId = value; }
        }

        public string ShortDescription
        {
            get { return _shortDescription; }
            set { _shortDescription = value; }
        }

        public string LongDescription
        {
            get { return _longDescription; }
            set { _longDescription = value; }
        }

        public int? TokenType
        {
            get { return _tokenType; }
            set { _tokenType = value; }
        }

        public string TokenTitle
        {
            get { return _tokenTitle; }
            set { _tokenTitle = value; }
        }

        public string TokenDescription
        {
            get { return _tokenDescription; }
            set { _tokenDescription = value; }
        }

        public string TokenTermsAndConditions
        {
            get { return _tokenTermsAndConditions; }
            set { _tokenTermsAndConditions = value; }
        }
        #endregion
    }
    #endregion
    #region SelectProductsAll Wrapper
    /// <summary>
    /// This class is a wrapper for the SelectProductsAll stored procedure.
    /// </summary>
    public class SelectProductsAll
    {
        #region Member Variables

        protected string _connectionString = String.Empty;
        protected SqlConnection _connection;
        protected SqlTransaction _transaction;
        protected bool _ownsConnection = true;
        protected int _recordsAffected = -1;
        protected System.Int32 _returnValue;

        #endregion

        #region Constructors

        public SelectProductsAll()
        {
        }

        public SelectProductsAll(string connectionString)
        {
            this.ConnectionString = connectionString;
        }

        public SelectProductsAll(SqlConnection connection)
        {
            this.Connection = connection;
        }

        public SelectProductsAll(SqlConnection connection, SqlTransaction transaction)
        {
            this.Connection = connection;
            this.Transaction = transaction;
        }

        #endregion

        #region Public Properties

        /// <summary>
        /// The connection string to use when executing the SelectProductsAll stored procedure.
        /// </summary>
        public string ConnectionString
        {
            get { return _connectionString; }
            set { _connectionString = value; }
        }

        /// <summary>
        /// The connection to use when executing the SelectProductsAll stored procedure.
        /// If this is not null, it will be used instead of creating a new connection.
        /// </summary>
        public SqlConnection Connection
        {
            get { return _connection; }
            set { _connection = value; }
        }

        /// <summary>
        /// The transaction to use when executing the SelectProductsAll stored procedure.
        /// If this is not null, the stored procedure will be executing within the transaction.
        /// </summary>
        public SqlTransaction Transaction
        {
            get { return _transaction; }
            set { _transaction = value; }
        }

        /// <summary>
        /// Gets the return value from the SelectProductsAll stored procedure.
        /// </summary>
        public System.Int32 ReturnValue
        {
            get { return _returnValue; }
        }

        /// <summary>
        /// Gets the number of rows changed, inserted, or deleted by execution of the SelectProductsAll stored procedure.
        /// </summary>
        public int RecordsAffected
        {
            get { return _recordsAffected; }
        }


        #endregion

        #region Helper Methods

        private SqlConnection GetConnection()
        {
            if (this.Connection != null)
            {
                _ownsConnection = false;
                return this.Connection;
            }

            System.Diagnostics.Debug.Assert(this.ConnectionString.Length != 0, "You must first set the ConnectioString property before calling an Execute method.");
            return new SqlConnection(this.ConnectionString);
        }

        #endregion

        #region Execute Methods

        /// <summary>
        /// This method calls the SelectProductsAll stored procedure and returns a SqlDataReader with the results.
        /// </summary>
        /// <returns>SqlDataReader</returns>
        public virtual SqlDataReader ExecuteReader()
        {
            SqlDataReader reader = null;
            SqlCommand cmd = new SqlCommand();
            SqlConnection cn = this.GetConnection();

            try
            {
                cmd.Connection = cn;
                cmd.Transaction = this.Transaction;
                cmd.CommandText = "[dbo].[SelectProductsAll]";
                cmd.CommandType = CommandType.StoredProcedure;

                #region Populate Parameters

                SqlParameter prmReturnValue = cmd.Parameters.Add("@RETURN_VALUE", SqlDbType.Int);
                prmReturnValue.Direction = ParameterDirection.ReturnValue;

                #endregion

                #region Execute Command
                if (cn.State != ConnectionState.Open) cn.Open();
                if (_ownsConnection)
                {
                    reader = cmd.ExecuteReader(CommandBehavior.CloseConnection);
                }
                else
                {
                    reader = cmd.ExecuteReader();
                }
                #endregion

                #region Get Output Parameters
                if (prmReturnValue.Value != null && prmReturnValue.Value != DBNull.Value)
                {
                    _returnValue = (System.Int32)prmReturnValue.Value;
                }

                #endregion
            }
            finally
            {
                cmd.Dispose();
            }

            return reader;
        }

        /// <summary>
        /// This method calls the SelectProductsAll stored procedure and returns a DataSet with the results.
        /// </summary>
        /// <returns>DataSet</returns>
        public virtual DataSet ExecuteDataSet()
        {
            DataSet ds = new DataSet();
            SqlCommand cmd = new SqlCommand();

            SqlConnection cn = this.GetConnection();

            try
            {
                cmd.Connection = cn;
                cmd.Transaction = this.Transaction;
                cmd.CommandText = "[dbo].[SelectProductsAll]";
                cmd.CommandType = CommandType.StoredProcedure;

                #region Populate Parameters
                SqlParameter prmReturnValue = cmd.Parameters.Add("@RETURN_VALUE", SqlDbType.Int);
                prmReturnValue.Direction = ParameterDirection.ReturnValue;

                #endregion

                #region Execute Command
                if (cn.State != ConnectionState.Open) cn.Open();

                SqlDataAdapter da = new SqlDataAdapter(cmd);
                da.Fill(ds);
                _recordsAffected = ds.Tables[0].Rows.Count;
                #endregion

                #region Get Output Parameters
                if (prmReturnValue.Value != null && prmReturnValue.Value != DBNull.Value)
                {
                    _returnValue = (System.Int32)prmReturnValue.Value;
                }

                #endregion
            }
            finally
            {
                if (_ownsConnection)
                {
                    if (cn.State == ConnectionState.Open)
                    {
                        cn.Close();
                    }

                    cn.Dispose();
                }
                cmd.Dispose();
            }

            return ds;
        }

        /// <summary>
        /// This method calls the SelectProductsAll stored procedure and outputs the results to a custom strongly typed collection.
        /// </summary>
        /// <returns>Collection<SelectProductsAllRow></returns>
        public virtual Collection<SelectProductsAllRow> Execute()
        {
            Collection<SelectProductsAllRow> selectProductsAllRowList = new Collection<SelectProductsAllRow>();
            SqlCommand cmd = new SqlCommand();

            SqlConnection cn = this.GetConnection();

            try
            {
                cmd.Connection = cn;
                cmd.Transaction = this.Transaction;
                cmd.CommandText = "[dbo].[SelectProductsAll]";
                cmd.CommandType = CommandType.StoredProcedure;

                #region Populate Parameters
                SqlParameter prmReturnValue = cmd.Parameters.Add("@RETURN_VALUE", SqlDbType.Int);
                prmReturnValue.Direction = ParameterDirection.ReturnValue;

                #endregion

                #region Execute Command
                if (cn.State != ConnectionState.Open) cn.Open();
                SqlDataReader reader = cmd.ExecuteReader();
                try
                {
                    while (reader.Read())
                    {
                        SelectProductsAllRow selectProductsAllRow = new SelectProductsAllRow(reader);
                        selectProductsAllRowList.Add(selectProductsAllRow);
                    }
                }
                finally
                {
                    if (!reader.IsClosed)
                    {
                        reader.Close();
                        _recordsAffected = reader.RecordsAffected;
                    }
                }
                #endregion

                #region Get Output Parameters
                if (prmReturnValue.Value != null && prmReturnValue.Value != DBNull.Value)
                {
                    _returnValue = (System.Int32)prmReturnValue.Value;
                }

                #endregion
            }
            finally
            {
                if (_ownsConnection)
                {
                    if (cn.State == ConnectionState.Open)
                    {
                        cn.Close();
                    }

                    cn.Dispose();
                }
                cmd.Dispose();
            }

            return selectProductsAllRowList;
        }

        /// <summary>
        /// This method calls the SelectProductsAll stored procedure and returns a SqlDataReader with the results.
        /// </summary>
        /// <param name="connectionString">The connection string to use</param>
        /// <returns>SqlDataReader</returns>
        public static SqlDataReader ExecuteReader(
        #region Parameters
string connectionString
        #endregion
)
        {
            SelectProductsAll selectProductsAll = new SelectProductsAll();

            #region Assign Property Values
            selectProductsAll.ConnectionString = connectionString;

            #endregion

            SqlDataReader reader = selectProductsAll.ExecuteReader();

            #region Get Property Values

            #endregion

            return reader;
        }

        /// <summary>
        /// This method calls the SelectProductsAll stored procedure and returns a DataSet with the results.
        /// </summary>
        /// <param name="connectionString">The connection string to use</param>
        /// <returns>DataSet</returns>
        public static DataSet ExecuteDataSet(
        #region Parameters
string connectionString
        #endregion
)
        {
            SelectProductsAll selectProductsAll = new SelectProductsAll();

            #region Assign Property Values
            selectProductsAll.ConnectionString = connectionString;

            #endregion

            DataSet ds = selectProductsAll.ExecuteDataSet();

            #region Get Property Values

            #endregion

            return ds;
        }

        /// <summary>
        /// This method calls the SelectProductsAll stored procedure and outputs the results to a custom strongly typed collection.
        /// </summary>
        /// <param name="connectionString">The connection string to use</param>
        /// <returns>Collection<SelectProductsAllRow></returns>
        public static Collection<SelectProductsAllRow> Execute(
        #region Parameters
string connectionString
        #endregion
)
        {
            SelectProductsAll selectProductsAll = new SelectProductsAll();

            #region Assign Property Values
            selectProductsAll.ConnectionString = connectionString;

            #endregion

            Collection<SelectProductsAllRow> selectProductsAllRowList = selectProductsAll.Execute();

            #region Get Property Values

            #endregion

            return selectProductsAllRowList;
        }
        #endregion
    }
    #endregion
}

