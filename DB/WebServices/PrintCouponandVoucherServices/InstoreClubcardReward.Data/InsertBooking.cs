
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by CodeSmith.
//
//     Date:    4/6/2009
//     Time:    2:36 
//     Version: 5.0.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;

namespace InstoreClubcardReward.Data
{
	#region usp_InsertBooking Wrapper
    /// <summary>
    /// This class is a wrapper for the usp_InsertBooking stored procedure.
    /// </summary>
    public class InsertBooking
    {
		#region Member Variables
		protected string _connectionString = String.Empty;
        protected SqlConnection _connection = null;
        protected SqlTransaction _transaction = null;
		protected bool _ownsConnection = true;
		protected int _recordsAffected = -1;
		protected int _returnValue = 0;
		protected SqlString _clubcard = SqlString.Null;
		protected bool _clubcardSet = false;
		protected SqlString _status = SqlString.Null;
		protected bool _statusSet = false;
		protected SqlInt32 _storeId = SqlInt32.Null;
		protected bool _storeIdSet = false;
		protected SqlInt32 _userId = SqlInt32.Null;
		protected bool _userIdSet = false;
		protected SqlInt32 _tillId = SqlInt32.Null;
		protected bool _tillIdSet = false;
		protected SqlInt32 _bookingId = SqlInt32.Null;
		protected bool _bookingIdSet = false;
		#endregion
		
		#region Constructors
		public InsertBooking()
		{
		}
		
		public InsertBooking(string connectionString)
		{
			this.ConnectionString = connectionString;
		}
		
		public InsertBooking(SqlConnection connection)
		{
			this.Connection = connection;
		}
		
		public InsertBooking(SqlConnection connection, SqlTransaction transaction)
		{
			this.Connection = connection;
			this.Transaction = transaction;
		}
		#endregion
		
		#region Public Properties
		/// <summary>
		/// The connection string to use when executing the usp_InsertBooking stored procedure.
		/// </summary>
		public string ConnectionString
		{
			get {return _connectionString;}
			set {_connectionString = value;}
		}
        
        /// <summary>
        /// The connection to use when executing the usp_InsertBooking stored procedure.
        /// If this is not null, it will be used instead of creating a new connection.
        /// </summary>
        public SqlConnection Connection
        {
            get { return _connection; }
            set { _connection = value; }
        }
		
        /// <summary>
        /// The transaction to use when executing the usp_InsertBooking stored procedure.
        /// If this is not null, the stored procedure will be executing within the transaction.
        /// </summary>
        public SqlTransaction Transaction
        {
            get { return _transaction; }
            set { _transaction = value; }
        }
		
		/// <summary>
		/// Gets the return value from the usp_InsertBooking stored procedure.
		/// </summary>
		public int ReturnValue
		{
			get {return _returnValue;}
		}
		
		/// <summary>
		/// Gets the number of rows changed, inserted, or deleted by execution of the usp_InsertBooking stored procedure.
		/// </summary>
		public int RecordsAffected
		{
			get {return _recordsAffected;}
		}
		
		/// <summary>
		/// 
		/// </summary>
		public SqlString Clubcard
		{
			get {return _clubcard;}
			set
			{
				_clubcard = value;
				_clubcardSet = true;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		public SqlString Status
		{
			get {return _status;}
			set
			{
				_status = value;
				_statusSet = true;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		public SqlInt32 StoreId
		{
			get {return _storeId;}
			set
			{
				_storeId = value;
				_storeIdSet = true;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		public SqlInt32 UserId
		{
			get {return _userId;}
			set
			{
				_userId = value;
				_userIdSet = true;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		public SqlInt32 TillId
		{
			get {return _tillId;}
			set
			{
				_tillId = value;
				_tillIdSet = true;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		public SqlInt32 BookingId
		{
			get {return _bookingId;}
			set
			{
				_bookingId = value;
				_bookingIdSet = true;
			}
		}
		#endregion
		
		#region Helper Methods
        private SqlConnection GetConnection()
        {
            if (this.Connection != null)
            {
				_ownsConnection = false;
                return this.Connection;
            }
            else
            {
 				System.Diagnostics.Debug.Assert(this.ConnectionString.Length != 0, "You must first set the ConnectioString property before calling an Execute method.");
            	return new SqlConnection(this.ConnectionString);
            }
        }
		#endregion
		
		#region Execute Methods
		/// <summary>
		/// This method calls the usp_InsertBooking stored procedure.
		/// </summary>
		public virtual void Execute()
		{
			SqlCommand cmd = new SqlCommand();
			
			SqlConnection cn = this.GetConnection();
			
			try
			{
				cmd.Connection = cn;
				cmd.Transaction = this.Transaction;
				cmd.CommandText = "[dbo].[usp_InsertBooking]";
				cmd.CommandType = CommandType.StoredProcedure;
				
				#region Populate Parameters
				SqlParameter prmReturnValue = cmd.Parameters.Add("@RETURN_VALUE", SqlDbType.Int);
				prmReturnValue.Direction = ParameterDirection.ReturnValue;
				
				SqlParameter prmClubcard = cmd.Parameters.Add("@Clubcard", SqlDbType.VarChar);
				prmClubcard.Direction = ParameterDirection.Input;
					prmClubcard.Size = 18;
				if (_clubcardSet == true || this.Clubcard.IsNull == false)
				{
					prmClubcard.Value = this.Clubcard;
				}
				
				SqlParameter prmStatus = cmd.Parameters.Add("@Status", SqlDbType.Char);
				prmStatus.Direction = ParameterDirection.Input;
					prmStatus.Size = 1;
				if (_statusSet == true || this.Status.IsNull == false)
				{
					prmStatus.Value = this.Status;
				}
				
				SqlParameter prmStoreId = cmd.Parameters.Add("@StoreId", SqlDbType.Int);
				prmStoreId.Direction = ParameterDirection.Input;
				if (_storeIdSet == true || this.StoreId.IsNull == false)
				{
					prmStoreId.Value = this.StoreId;
				}
				
				SqlParameter prmUserId = cmd.Parameters.Add("@UserId", SqlDbType.Int);
				prmUserId.Direction = ParameterDirection.Input;
				if (_userIdSet == true || this.UserId.IsNull == false)
				{
					prmUserId.Value = this.UserId;
				}
				
				SqlParameter prmTillId = cmd.Parameters.Add("@TillId", SqlDbType.Int);
				prmTillId.Direction = ParameterDirection.Input;
				if (_tillIdSet == true || this.TillId.IsNull == false)
				{
					prmTillId.Value = this.TillId;
				}
				
				SqlParameter prmBookingId = cmd.Parameters.Add("@BookingId", SqlDbType.Int);
				if (_bookingIdSet == true)
				{
				prmBookingId.Direction = ParameterDirection.InputOutput;
				}
				else
				{
					prmBookingId.Direction = ParameterDirection.Output;
				}
				if (_bookingIdSet == true || this.BookingId.IsNull == false)
				{
					prmBookingId.Value = this.BookingId;
				}
				#endregion
				
				#region Execute Command
				if (cn.State != ConnectionState.Open) cn.Open();
				_recordsAffected = cmd.ExecuteNonQuery();
				#endregion
				
				#region Get Output Parameters
				if (prmReturnValue.Value != null && prmReturnValue.Value != DBNull.Value)
				{
					_returnValue = (int)prmReturnValue.Value;
				}
				
				if (prmBookingId != null && prmBookingId.Value != null)
				{
					if (prmBookingId.Value is SqlInt32)
					{
						this.BookingId = (SqlInt32)prmBookingId.Value;
					}
					else
					{
						if (prmBookingId.Value != DBNull.Value)
						{
							this.BookingId = new SqlInt32((int)prmBookingId.Value);
						}
						else
						{
							this.BookingId = SqlInt32.Null;
						}
					}
				}
				else
				{
					this.BookingId = SqlInt32.Null;
				}
				#endregion
			}
			finally
			{
				if (_ownsConnection)
				{
					if (cn.State == ConnectionState.Open)
					{
						cn.Close();
					}
					
					cn.Dispose();
				}
				cmd.Dispose();
			}
		}
		
		/// <summary>
		/// This method calls the usp_InsertBooking stored procedure.
		/// </summary>
		/// <param name="connectionString">The connection string to use</param>
		/// <param name="clubcard"></param>
		/// <param name="status"></param>
		/// <param name="storeId"></param>
		/// <param name="userId"></param>
		/// <param name="tillId"></param>
		/// <param name="bookingId"></param>
		public static void Execute(
				#region Parameters
				string connectionString,
				SqlString clubcard,
				SqlString status,
				SqlInt32 storeId,
				SqlInt32 userId,
				SqlInt32 tillId,
				ref SqlInt32 bookingId
				#endregion
		    )
		{
			InsertBooking insertBooking = new InsertBooking();
			
			#region Assign Property Values
			insertBooking.ConnectionString = connectionString;
			insertBooking.Clubcard = clubcard;
			insertBooking.Status = status;
			insertBooking.StoreId = storeId;
			insertBooking.UserId = userId;
			insertBooking.TillId = tillId;
			insertBooking.BookingId = bookingId;
			#endregion
			
			insertBooking.Execute();
			
			#region Get Property Values
			bookingId = insertBooking.BookingId;
			#endregion
		}
		#endregion
	}
	#endregion
}

