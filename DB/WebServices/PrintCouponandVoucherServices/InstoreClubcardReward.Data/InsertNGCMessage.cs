//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by CodeSmith.
//
//     Date:    4/17/2009
//     Time:    7:56 
//     Version: 5.0.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;

namespace InstoreClubcardReward.Data
{
    #region InsertNGCMessage Wrapper
    /// <summary>
    /// This class is a wrapper for the InsertNGCMessage stored procedure.
    /// </summary>
    public class InsertNGCMessage
    {
        #region Member Variables
        protected string _connectionString = String.Empty;
        protected SqlConnection _connection = null;
        protected SqlTransaction _transaction = null;
        protected bool _ownsConnection = true;
        protected int _recordsAffected = -1;
        protected int _returnValue = 0;
        protected SqlInt32 _agentId = SqlInt32.Null;
        protected bool _agentIdSet = false;
        protected SqlString _messageURL = SqlString.Null;
        protected bool _messageURLSet = false;
        protected SqlString _messageXML = SqlString.Null;
        protected bool _messageXMLSet = false;
        protected SqlInt32 _requestId = SqlInt32.Null;
        protected bool _requestIdSet = false;
        protected SqlString _callingMachine = SqlString.Null;
        protected bool _callingMachineSet = false;
        protected SqlInt32 _nGCId = SqlInt32.Null;
        protected bool _nGCIdSet = false;
        #endregion

        #region Constructors
        public InsertNGCMessage()
        {
        }

        public InsertNGCMessage(string connectionString)
        {
            this.ConnectionString = connectionString;
        }

        public InsertNGCMessage(SqlConnection connection)
        {
            this.Connection = connection;
        }

        public InsertNGCMessage(SqlConnection connection, SqlTransaction transaction)
        {
            this.Connection = connection;
            this.Transaction = transaction;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// The connection string to use when executing the InsertNGCMessage stored procedure.
        /// </summary>
        public string ConnectionString
        {
            get { return _connectionString; }
            set { _connectionString = value; }
        }

        /// <summary>
        /// The connection to use when executing the InsertNGCMessage stored procedure.
        /// If this is not null, it will be used instead of creating a new connection.
        /// </summary>
        public SqlConnection Connection
        {
            get { return _connection; }
            set { _connection = value; }
        }

        /// <summary>
        /// The transaction to use when executing the InsertNGCMessage stored procedure.
        /// If this is not null, the stored procedure will be executing within the transaction.
        /// </summary>
        public SqlTransaction Transaction
        {
            get { return _transaction; }
            set { _transaction = value; }
        }

        /// <summary>
        /// Gets the return value from the InsertNGCMessage stored procedure.
        /// </summary>
        public int ReturnValue
        {
            get { return _returnValue; }
        }

        /// <summary>
        /// Gets the number of rows changed, inserted, or deleted by execution of the InsertNGCMessage stored procedure.
        /// </summary>
        public int RecordsAffected
        {
            get { return _recordsAffected; }
        }

        /// <summary>
        /// 
        /// </summary>
        public SqlInt32 AgentId
        {
            get { return _agentId; }
            set
            {
                _agentId = value;
                _agentIdSet = true;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public SqlString MessageURL
        {
            get { return _messageURL; }
            set
            {
                _messageURL = value;
                _messageURLSet = true;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public SqlString MessageXML
        {
            get { return _messageXML; }
            set
            {
                _messageXML = value;
                _messageXMLSet = true;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public SqlInt32 RequestId
        {
            get { return _requestId; }
            set
            {
                _requestId = value;
                _requestIdSet = true;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public SqlString CallingMachine
        {
            get { return _callingMachine; }
            set
            {
                _callingMachine = value;
                _callingMachineSet = true;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public SqlInt32 NGCId
        {
            get { return _nGCId; }
            set
            {
                _nGCId = value;
                _nGCIdSet = true;
            }
        }
        #endregion

        #region Helper Methods
        private SqlConnection GetConnection()
        {
            if (this.Connection != null)
            {
                _ownsConnection = false;
                return this.Connection;
            }
            else
            {
                System.Diagnostics.Debug.Assert(this.ConnectionString.Length != 0, "You must first set the ConnectioString property before calling an Execute method.");
                return new SqlConnection(this.ConnectionString);
            }
        }
        #endregion

        #region Execute Methods
        /// <summary>
        /// This method calls the InsertNGCMessage stored procedure.
        /// </summary>
        public virtual void Execute()
        {
            SqlCommand cmd = new SqlCommand();

            SqlConnection cn = this.GetConnection();

            try
            {
                cmd.Connection = cn;
                cmd.Transaction = this.Transaction;
                cmd.CommandText = "[dbo].[InsertNGCMessage]";
                cmd.CommandType = CommandType.StoredProcedure;

                #region Populate Parameters
                SqlParameter prmReturnValue = cmd.Parameters.Add("@RETURN_VALUE", SqlDbType.Int);
                prmReturnValue.Direction = ParameterDirection.ReturnValue;

                SqlParameter prmAgentId = cmd.Parameters.Add("@AgentId", SqlDbType.Int);
                prmAgentId.Direction = ParameterDirection.Input;
                if (_agentIdSet == true || this.AgentId.IsNull == false)
                {
                    prmAgentId.Value = this.AgentId;
                }

                SqlParameter prmMessageURL = cmd.Parameters.Add("@MessageURL", SqlDbType.VarChar);
                prmMessageURL.Direction = ParameterDirection.Input;
                prmMessageURL.Size = 512;
                if (_messageURLSet == true || this.MessageURL.IsNull == false)
                {
                    prmMessageURL.Value = this.MessageURL;
                }

                SqlParameter prmMessageXML = cmd.Parameters.Add("@MessageXML", SqlDbType.VarChar);
                prmMessageXML.Direction = ParameterDirection.Input;
                prmMessageXML.Size = 3000;
                if (_messageXMLSet == true || this.MessageXML.IsNull == false)
                {
                    prmMessageXML.Value = this.MessageXML;
                }

                SqlParameter prmRequestId = cmd.Parameters.Add("@RequestId", SqlDbType.Int);
                prmRequestId.Direction = ParameterDirection.Input;
                if (_requestIdSet == true || this.RequestId.IsNull == false)
                {
                    prmRequestId.Value = this.RequestId;
                }

                SqlParameter prmCallingMachine = cmd.Parameters.Add("@CallingMachine", SqlDbType.VarChar);
                prmCallingMachine.Direction = ParameterDirection.Input;
                prmCallingMachine.Size = 255;
                if (_callingMachineSet == true || this.CallingMachine.IsNull == false)
                {
                    prmCallingMachine.Value = this.CallingMachine;
                }

                SqlParameter prmNGCId = cmd.Parameters.Add("@NGCId", SqlDbType.Int);
                if (_nGCIdSet == true)
                {
                    prmNGCId.Direction = ParameterDirection.InputOutput;
                }
                else
                {
                    prmNGCId.Direction = ParameterDirection.Output;
                }
                if (_nGCIdSet == true || this.NGCId.IsNull == false)
                {
                    prmNGCId.Value = this.NGCId;
                }
                #endregion

                #region Execute Command
                if (cn.State != ConnectionState.Open) cn.Open();
                _recordsAffected = cmd.ExecuteNonQuery();
                #endregion

                #region Get Output Parameters
                if (prmReturnValue.Value != null && prmReturnValue.Value != DBNull.Value)
                {
                    _returnValue = (int)prmReturnValue.Value;
                }

                if (prmNGCId != null && prmNGCId.Value != null)
                {
                    if (prmNGCId.Value is SqlInt32)
                    {
                        this.NGCId = (SqlInt32)prmNGCId.Value;
                    }
                    else
                    {
                        if (prmNGCId.Value != DBNull.Value)
                        {
                            this.NGCId = new SqlInt32((int)prmNGCId.Value);
                        }
                        else
                        {
                            this.NGCId = SqlInt32.Null;
                        }
                    }
                }
                else
                {
                    this.NGCId = SqlInt32.Null;
                }
                #endregion
            }
            finally
            {
                if (_ownsConnection)
                {
                    if (cn.State == ConnectionState.Open)
                    {
                        cn.Close();
                    }

                    cn.Dispose();
                }
                cmd.Dispose();
            }
        }

        /// <summary>
        /// This method calls the InsertNGCMessage stored procedure.
        /// </summary>
        /// <param name="connectionString">The connection string to use</param>
        /// <param name="agentId"></param>
        /// <param name="messageURL"></param>
        /// <param name="messageXML"></param>
        /// <param name="requestId"></param>
        /// <param name="callingMachine"></param>
        /// <param name="nGCId"></param>
        public static void Execute(
        #region Parameters
string connectionString,
                SqlInt32 agentId,
                SqlString messageURL,
                SqlString messageXML,
                SqlInt32 requestId,
                SqlString callingMachine,
                ref SqlInt32 nGCId
        #endregion
)
        {
            InsertNGCMessage insertNGCMessage = new InsertNGCMessage();

            #region Assign Property Values
            insertNGCMessage.ConnectionString = connectionString;
            insertNGCMessage.AgentId = agentId;
            insertNGCMessage.MessageURL = messageURL;
            insertNGCMessage.MessageXML = messageXML;
            insertNGCMessage.RequestId = requestId;
            insertNGCMessage.CallingMachine = callingMachine;
            insertNGCMessage.NGCId = nGCId;
            #endregion

            insertNGCMessage.Execute();

            #region Get Property Values
            nGCId = insertNGCMessage.NGCId;
            #endregion
        }
        #endregion
    }
    #endregion
}

