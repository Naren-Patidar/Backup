
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by CodeSmith.
//
//     Date:    4/29/2009
//     Time:    1:24 
//     Version: 5.0.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;

namespace InstoreClubcardReward.Data
{
    #region usp_InsertPaymentVoucher Wrapper
    /// <summary>
    /// This class is a wrapper for the usp_InsertPaymentVoucher stored procedure.
    /// </summary>
    public class InsertPaymentVoucher
    {
        #region Member Variables
        protected string _connectionString = String.Empty;
        protected SqlConnection _connection = null;
        protected SqlTransaction _transaction = null;
        protected bool _ownsConnection = true;
        protected int _recordsAffected = -1;
        protected int _returnValue = 0;
        protected SqlInt32 _bookingId = SqlInt32.Null;
        protected bool _bookingIdSet = false;
        protected SqlString _eAN = SqlString.Null;
        protected bool _eANSet = false;
        protected SqlString _alpha = SqlString.Null;
        protected bool _alphaSet = false;
        protected SqlInt32 _voucherType = SqlInt32.Null;
        protected bool _voucherTypeSet = false;
        protected SqlInt32 _amount = SqlInt32.Null;
        protected bool _amountSet = false;
        protected SqlInt32 _status = SqlInt32.Null;
        protected bool _statusSet = false;
        protected SqlInt32 _voucherId = SqlInt32.Null;
        protected bool _voucherIdSet = false;
        #endregion

        #region Constructors
        public InsertPaymentVoucher()
        {
        }

        public InsertPaymentVoucher(string connectionString)
        {
            this.ConnectionString = connectionString;
        }

        public InsertPaymentVoucher(SqlConnection connection)
        {
            this.Connection = connection;
        }

        public InsertPaymentVoucher(SqlConnection connection, SqlTransaction transaction)
        {
            this.Connection = connection;
            this.Transaction = transaction;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// The connection string to use when executing the usp_InsertPaymentVoucher stored procedure.
        /// </summary>
        public string ConnectionString
        {
            get { return _connectionString; }
            set { _connectionString = value; }
        }

        /// <summary>
        /// The connection to use when executing the usp_InsertPaymentVoucher stored procedure.
        /// If this is not null, it will be used instead of creating a new connection.
        /// </summary>
        public SqlConnection Connection
        {
            get { return _connection; }
            set { _connection = value; }
        }

        /// <summary>
        /// The transaction to use when executing the usp_InsertPaymentVoucher stored procedure.
        /// If this is not null, the stored procedure will be executing within the transaction.
        /// </summary>
        public SqlTransaction Transaction
        {
            get { return _transaction; }
            set { _transaction = value; }
        }

        /// <summary>
        /// Gets the return value from the usp_InsertPaymentVoucher stored procedure.
        /// </summary>
        public int ReturnValue
        {
            get { return _returnValue; }
        }

        /// <summary>
        /// Gets the number of rows changed, inserted, or deleted by execution of the usp_InsertPaymentVoucher stored procedure.
        /// </summary>
        public int RecordsAffected
        {
            get { return _recordsAffected; }
        }

        /// <summary>
        /// 
        /// </summary>
        public SqlInt32 BookingId
        {
            get { return _bookingId; }
            set
            {
                _bookingId = value;
                _bookingIdSet = true;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public SqlString EAN
        {
            get { return _eAN; }
            set
            {
                _eAN = value;
                _eANSet = true;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public SqlString Alpha
        {
            get { return _alpha; }
            set
            {
                _alpha = value;
                _alphaSet = true;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public SqlInt32 VoucherType
        {
            get { return _voucherType; }
            set
            {
                _voucherType = value;
                _voucherTypeSet = true;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public SqlInt32 Amount
        {
            get { return _amount; }
            set
            {
                _amount = value;
                _amountSet = true;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public SqlInt32 Status
        {
            get { return _status; }
            set
            {
                _status = value;
                _statusSet = true;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public SqlInt32 VoucherId
        {
            get { return _voucherId; }
            set
            {
                _voucherId = value;
                _voucherIdSet = true;
            }
        }
        #endregion

        #region Helper Methods
        private SqlConnection GetConnection()
        {
            if (this.Connection != null)
            {
                _ownsConnection = false;
                return this.Connection;
            }
            else
            {
                System.Diagnostics.Debug.Assert(this.ConnectionString.Length != 0, "You must first set the ConnectioString property before calling an Execute method.");
                return new SqlConnection(this.ConnectionString);
            }
        }
        #endregion

        #region Execute Methods
        /// <summary>
        /// This method calls the usp_InsertPaymentVoucher stored procedure.
        /// </summary>
        public virtual void Execute()
        {
            SqlCommand cmd = new SqlCommand();

            SqlConnection cn = this.GetConnection();

            try
            {
                cmd.Connection = cn;
                cmd.Transaction = this.Transaction;
                cmd.CommandText = "[dbo].[usp_InsertPaymentVoucher]";
                cmd.CommandType = CommandType.StoredProcedure;

                #region Populate Parameters
                SqlParameter prmReturnValue = cmd.Parameters.Add("@RETURN_VALUE", SqlDbType.Int);
                prmReturnValue.Direction = ParameterDirection.ReturnValue;

                SqlParameter prmBookingId = cmd.Parameters.Add("@BookingId", SqlDbType.Int);
                prmBookingId.Direction = ParameterDirection.Input;
                if (_bookingIdSet == true || this.BookingId.IsNull == false)
                {
                    prmBookingId.Value = this.BookingId;
                }

                SqlParameter prmEAN = cmd.Parameters.Add("@EAN", SqlDbType.Char);
                prmEAN.Direction = ParameterDirection.Input;
                prmEAN.Size = 22;
                if (_eANSet == true || this.EAN.IsNull == false)
                {
                    prmEAN.Value = this.EAN;
                }

                SqlParameter prmAlpha = cmd.Parameters.Add("@Alpha", SqlDbType.VarChar);
                prmAlpha.Direction = ParameterDirection.Input;
                prmAlpha.Size = 15;
                if (_alphaSet == true || this.Alpha.IsNull == false)
                {
                    prmAlpha.Value = this.Alpha;
                }

                SqlParameter prmVoucherType = cmd.Parameters.Add("@VoucherType", SqlDbType.Int);
                prmVoucherType.Direction = ParameterDirection.Input;
                if (_voucherTypeSet == true || this.VoucherType.IsNull == false)
                {
                    prmVoucherType.Value = this.VoucherType;
                }

                SqlParameter prmAmount = cmd.Parameters.Add("@Amount", SqlDbType.Int);
                prmAmount.Direction = ParameterDirection.Input;
                if (_amountSet == true || this.Amount.IsNull == false)
                {
                    prmAmount.Value = this.Amount;
                }

                SqlParameter prmStatus = cmd.Parameters.Add("@Status", SqlDbType.Int);
                prmStatus.Direction = ParameterDirection.Input;
                if (_statusSet == true || this.Status.IsNull == false)
                {
                    prmStatus.Value = this.Status;
                }

                SqlParameter prmVoucherId = cmd.Parameters.Add("@VoucherId", SqlDbType.Int);
                if (_voucherIdSet == true)
                {
                    prmVoucherId.Direction = ParameterDirection.InputOutput;
                }
                else
                {
                    prmVoucherId.Direction = ParameterDirection.Output;
                }
                if (_voucherIdSet == true || this.VoucherId.IsNull == false)
                {
                    prmVoucherId.Value = this.VoucherId;
                }
                #endregion

                #region Execute Command
                if (cn.State != ConnectionState.Open) cn.Open();
                _recordsAffected = cmd.ExecuteNonQuery();
                #endregion

                #region Get Output Parameters
                if (prmReturnValue.Value != null && prmReturnValue.Value != DBNull.Value)
                {
                    _returnValue = (int)prmReturnValue.Value;
                }

                if (prmVoucherId != null && prmVoucherId.Value != null)
                {
                    if (prmVoucherId.Value is SqlInt32)
                    {
                        this.VoucherId = (SqlInt32)prmVoucherId.Value;
                    }
                    else
                    {
                        if (prmVoucherId.Value != DBNull.Value)
                        {
                            this.VoucherId = new SqlInt32((int)prmVoucherId.Value);
                        }
                        else
                        {
                            this.VoucherId = SqlInt32.Null;
                        }
                    }
                }
                else
                {
                    this.VoucherId = SqlInt32.Null;
                }
                #endregion
            }
            finally
            {
                if (_ownsConnection)
                {
                    if (cn.State == ConnectionState.Open)
                    {
                        cn.Close();
                    }

                    cn.Dispose();
                }
                cmd.Dispose();
            }
        }

        /// <summary>
        /// This method calls the usp_InsertPaymentVoucher stored procedure.
        /// </summary>
        /// <param name="connectionString">The connection string to use</param>
        /// <param name="bookingId"></param>
        /// <param name="eAN"></param>
        /// <param name="alpha"></param>
        /// <param name="voucherType"></param>
        /// <param name="amount"></param>
        /// <param name="status"></param>
        /// <param name="voucherId"></param>
        public static void Execute(
        #region Parameters
string connectionString,
                SqlInt32 bookingId,
                SqlString eAN,
                SqlString alpha,
                SqlInt32 voucherType,
                SqlInt32 amount,
                SqlInt32 status,
                ref SqlInt32 voucherId
        #endregion
)
        {
            InsertPaymentVoucher insertPaymentVoucher = new InsertPaymentVoucher();

            #region Assign Property Values
            insertPaymentVoucher.ConnectionString = connectionString;
            insertPaymentVoucher.BookingId = bookingId;
            insertPaymentVoucher.EAN = eAN;
            insertPaymentVoucher.Alpha = alpha;
            insertPaymentVoucher.VoucherType = voucherType;
            insertPaymentVoucher.Amount = amount;
            insertPaymentVoucher.Status = status;
            insertPaymentVoucher.VoucherId = voucherId;
            #endregion

            insertPaymentVoucher.Execute();

            #region Get Property Values
            voucherId = insertPaymentVoucher.VoucherId;
            #endregion
        }
        #endregion
    }
    #endregion
}

