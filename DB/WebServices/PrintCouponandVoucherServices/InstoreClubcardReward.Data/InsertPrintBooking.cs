
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by CodeSmith.
//
//     Version: 5.0.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Data;
using System.Data.SqlClient;

namespace InstoreClubcardReward.Data
{
    #region usp_InsertPrintBooking Wrapper
    /// <summary>
    /// This class is a wrapper for the usp_InsertPrintBooking stored procedure.
    /// </summary>
    public class InsertPrintBooking
    {
        #region Member Variables

        protected string _connectionString = String.Empty;
        protected SqlConnection _connection;
        protected SqlTransaction _transaction;
        protected bool _ownsConnection = true;
        protected int _recordsAffected = -1;
        protected System.Int32 _returnValue;
        protected int? _bookingId;
        protected int? _printNumber;
        protected DateTime? _printDate;
        protected string _printParameter;
        protected int? _printReasonId;

        #endregion

        #region Constructors

        public InsertPrintBooking()
        {
        }

        public InsertPrintBooking(string connectionString)
        {
            this.ConnectionString = connectionString;
        }

        public InsertPrintBooking(SqlConnection connection)
        {
            this.Connection = connection;
        }

        public InsertPrintBooking(SqlConnection connection, SqlTransaction transaction)
        {
            this.Connection = connection;
            this.Transaction = transaction;
        }

        #endregion

        #region Public Properties

        /// <summary>
        /// The connection string to use when executing the usp_InsertPrintBooking stored procedure.
        /// </summary>
        public string ConnectionString
        {
            get { return _connectionString; }
            set { _connectionString = value; }
        }

        /// <summary>
        /// The connection to use when executing the usp_InsertPrintBooking stored procedure.
        /// If this is not null, it will be used instead of creating a new connection.
        /// </summary>
        public SqlConnection Connection
        {
            get { return _connection; }
            set { _connection = value; }
        }

        /// <summary>
        /// The transaction to use when executing the usp_InsertPrintBooking stored procedure.
        /// If this is not null, the stored procedure will be executing within the transaction.
        /// </summary>
        public SqlTransaction Transaction
        {
            get { return _transaction; }
            set { _transaction = value; }
        }

        /// <summary>
        /// Gets the return value from the usp_InsertPrintBooking stored procedure.
        /// </summary>
        public System.Int32 ReturnValue
        {
            get { return _returnValue; }
        }

        /// <summary>
        /// Gets the number of rows changed, inserted, or deleted by execution of the usp_InsertPrintBooking stored procedure.
        /// </summary>
        public int RecordsAffected
        {
            get { return _recordsAffected; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int? BookingId
        {
            get { return _bookingId; }
            set
            {
                _bookingId = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public int? PrintNumber
        {
            get { return _printNumber; }
            set
            {
                _printNumber = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime? PrintDate
        {
            get { return _printDate; }
            set
            {
                _printDate = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public string PrintParameter
        {
            get { return _printParameter; }
            set
            {
                _printParameter = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public int? PrintReasonId
        {
            get { return _printReasonId; }
            set
            {
                _printReasonId = value;
            }
        }

        #endregion

        #region Helper Methods

        private SqlConnection GetConnection()
        {
            if (this.Connection != null)
            {
                _ownsConnection = false;
                return this.Connection;
            }

            System.Diagnostics.Debug.Assert(this.ConnectionString.Length != 0, "You must first set the ConnectioString property before calling an Execute method.");
            return new SqlConnection(this.ConnectionString);
        }

        #endregion

        #region Execute Methods

        /// <summary>
        /// This method calls the usp_InsertPrintBooking stored procedure.
        /// </summary>
        public virtual void Execute()
        {
            SqlCommand cmd = new SqlCommand();

            SqlConnection cn = this.GetConnection();

            try
            {
                cmd.Connection = cn;
                cmd.Transaction = this.Transaction;
                cmd.CommandText = "[dbo].[usp_InsertPrintBooking]";
                cmd.CommandType = CommandType.StoredProcedure;

                #region Populate Parameters
                SqlParameter prmReturnValue = cmd.Parameters.Add("@RETURN_VALUE", SqlDbType.Int);
                prmReturnValue.Direction = ParameterDirection.ReturnValue;

                SqlParameter prmBookingId = cmd.Parameters.Add("@BookingId", SqlDbType.Int);
                prmBookingId.Direction = ParameterDirection.Input;
                if (BookingId.HasValue)
                    prmBookingId.Value = BookingId.Value;
                else
                    prmBookingId.Value = DBNull.Value;


                SqlParameter prmPrintNumber = cmd.Parameters.Add("@PrintNumber", SqlDbType.Int);
                prmPrintNumber.Direction = ParameterDirection.Input;
                if (PrintNumber.HasValue)
                    prmPrintNumber.Value = PrintNumber.Value;
                else
                    prmPrintNumber.Value = DBNull.Value;


                SqlParameter prmPrintDate = cmd.Parameters.Add("@PrintDate", SqlDbType.DateTime);
                prmPrintDate.Direction = ParameterDirection.Input;
                if (PrintDate.HasValue)
                    prmPrintDate.Value = PrintDate.Value;
                else
                    prmPrintDate.Value = DBNull.Value;


                SqlParameter prmPrintParameter = cmd.Parameters.Add("@PrintParameter", SqlDbType.VarChar);
                prmPrintParameter.Direction = ParameterDirection.Input;
                if (!string.IsNullOrEmpty(PrintParameter))
                    prmPrintParameter.Value = PrintParameter;
                else
                    prmPrintParameter.Value = DBNull.Value;

                SqlParameter prmPrintReasonId = cmd.Parameters.Add("@PrintReasonId", SqlDbType.Int);
                prmPrintReasonId.Direction = ParameterDirection.Input;
                if (PrintReasonId.HasValue)
                    prmPrintReasonId.Value = PrintReasonId.Value;
                else
                    prmPrintReasonId.Value = DBNull.Value;

                #endregion

                #region Execute Command
                if (cn.State != ConnectionState.Open) cn.Open();
                _recordsAffected = cmd.ExecuteNonQuery();
                #endregion

                #region Get Output Parameters
                if (prmReturnValue.Value != null && prmReturnValue.Value != DBNull.Value)
                {
                    _returnValue = (System.Int32)prmReturnValue.Value;
                }

                #endregion
            }
            finally
            {
                if (_ownsConnection)
                {
                    if (cn.State == ConnectionState.Open)
                    {
                        cn.Close();
                    }

                    cn.Dispose();
                }
                cmd.Dispose();
            }
        }

        /// <summary>
        /// This method calls the usp_InsertPrintBooking stored procedure.
        /// </summary>
        /// <param name="connectionString">The connection string to use</param>
        /// <param name="bookingId"></param>
        /// <param name="printNumber"></param>
        /// <param name="printDate"></param>
        /// <param name="printParameter"></param>
        public static void Execute(
        #region Parameters
string connectionString,
                int? bookingId,
                int? printNumber,
                DateTime? printDate,
                string printParameter
        #endregion
)
        {
            InsertPrintBooking insertPrintBooking = new InsertPrintBooking();

            #region Assign Property Values
            insertPrintBooking.ConnectionString = connectionString;
            insertPrintBooking.BookingId = bookingId;
            insertPrintBooking.PrintNumber = printNumber;
            insertPrintBooking.PrintDate = printDate;
            insertPrintBooking.PrintParameter = printParameter;
            #endregion

            insertPrintBooking.Execute();

            #region Get Property Values

            #endregion
        }
        #endregion
    }
    #endregion
}

